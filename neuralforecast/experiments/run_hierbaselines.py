# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/experiments__run_hierbaselines.ipynb (unless otherwise specified).

__all__ = ['LEVEL', 'qs', 'QUANTILES', 'ModifiedPoissonRegressor', 'poisson_regression', 'auto_arima',
           'run_tourismL_arima', 'run_tourismL_poisson_regression', 'run_favorita_arima',
           'run_favorita_poisson_regression']

# Cell
import numpy as np
import pandas as pd
from tqdm import tqdm
from typing import Collection, List, Optional, Sequence, Tuple

import shutil
from py7zr import unpack_7zarchive
# shutil.register_unpack_format('7zip', ['.7z'], unpack_7zarchive)

import numpy as np
from sklearn.preprocessing import MaxAbsScaler
from sklearn.linear_model  import PoissonRegressor

from statsforecast import StatsForecast
from statsforecast.models import (
    seasonal_naive,
    auto_arima,
    auto_arima_f,
    forecast_arima
)

from ..data.datasets.utils import CodeTimer
from ..data.datasets.favorita import Favorita
from ..data.datasets.tourismL import TourismL

LEVEL = np.arange(0, 100, 2)
qs = [[50-l/2, 50+l/2] for l in LEVEL]
QUANTILES = np.sort(np.concatenate(qs)/100)

# Cell
class ModifiedPoissonRegressor(PoissonRegressor):
    def __init__(self, **kwargs):
        self.shrink_factor = 1.
        self.model = PoissonRegressor(**kwargs)

    def scale(self, X, y):
        self.scaler = MaxAbsScaler()
        X = self.scaler.fit_transform(X)

        while np.mean(y) > 1000:
            self.shrink_factor *= 0.5
            y = y / 2
        return X, y

    def fit(self, X, y, sample_weight=None, **kwargs):
        # Help Poisson regs for large data
        X, y = self.scale(X, y)
        self.model.fit(X, y)
        return self

    def predict(self, X, quantiles=None, size=200):
        X = self.scaler.transform(X)
        y_pred = self.model.predict(X)
        y_pred = (1/self.shrink_factor) * y_pred

        if quantiles is not None:
            y_pred  = np.repeat(y_pred[:,None], size, axis=1)
            sample  = np.random.poisson(lam=y_pred).reshape(-1, size)
            yq_pred = np.percentile(sample, q=100*quantiles,
                                    axis=1, interpolation='lower').T
            return yq_pred

        return y_pred

# Cell
def poisson_regression(X: np.ndarray, h: int,
                   future_xreg=None,
                   level: Optional[Tuple[int]]=None):
    y_train = X[:, 0]
    X_train = X[:, 1:]

    model   = ModifiedPoissonRegressor(max_iter=1000)
    model   = model.fit(X_train, y_train)
    y_hat   = model.predict(future_xreg)

    if level is None:
        return model.predict(future_xreg)
    else:
        qs = [[50-l/2, 50+l/2] for l in level]
        quantiles = np.sort(np.concatenate(qs)/100)
        yq_hat    = model.predict(future_xreg, quantiles=quantiles)

        # numpy Q,H to y_pred dict Q keys and H vectors
        keys = [f'lo-{l}' for l in reversed(level)] +\
               [f'hi-{l}' for l in level]
        y_pred = dict(zip(keys, yq_hat.T))
        y_pred['mean'] = y_hat
        return y_pred

def auto_arima(X: np.ndarray, h: int, future_xreg=None, season_length: int = 1,
               approximation: bool = False, level: Optional[Tuple[int]] = None) -> np.ndarray:
    y = X[:, 0] if X.ndim == 2 else X
    xreg = X[:, 1:] if (X.ndim == 2 and X.shape[1] > 1) else None
    mod = auto_arima_f(
        y,
        xreg=xreg,
        period=season_length,
        approximation=approximation,
        allowmean=False, allowdrift=False #not implemented yet
    )
    fcst = forecast_arima(mod, h, xreg=future_xreg, level=level)
    if level is None:
        return fcst['mean']
    return {
        'mean': fcst['mean'],
        **{f'lo-{l}': fcst['lower'][f'{l}%'] for l in reversed(level)},
        **{f'hi-{l}': fcst['upper'][f'{l}%'] for l in level},
    }

# Cell
def run_tourismL_arima(verbose=False):
    with CodeTimer('Read and Parse data   ', verbose):
        directory = './data/hierarchical/TourismL'
        #TourismL.preprocess_data(directory=directory, verbose=False)
        data = TourismL.load_process(directory=directory, verbose=False)

        # Declare dataset dimensions
        T = 216 #365
        H = 12  #34
        N = len(data['hier_labels'])

        # Declare and wrangle dataframes
        X_hier_df = data['X_hier_df']
        Y_train_df = X_hier_df.groupby(['unique_id']).tail(T+H).reset_index(drop=True)
        Y_test_df  = Y_train_df.groupby(['unique_id']).tail(H).reset_index(drop=True)
        Y_train_df = Y_train_df.groupby(['unique_id']).head(T).reset_index(drop=True)
        Y_train_df = Y_train_df[['unique_id', 'ds', 'y']]
        Y_test_df  = Y_test_df[['unique_id', 'ds', 'y']]

    with CodeTimer('Fit/Predict Model     ', verbose):
        # Fit/Predict SARIMAx12
        fcst = StatsForecast(Y_train_df.set_index('unique_id'),
                            models=[(auto_arima, 12)],
                            freq='M', n_jobs=4)
        Y_hat_df = fcst.forecast(H, level=LEVEL).reset_index()

        # Parse predictions
        Y_test = Y_test_df.y.values
        Y_hat  = Y_hat_df['auto_arima_season_length-12_mean'].values
        Yq_hat = Y_hat_df.drop(labels=['unique_id', 'ds',
                               'auto_arima_season_length-12_mean'], axis=1).values

        Y_hat  = Y_hat.reshape(N, H)
        Y_test = Y_test.reshape(N, H)
        Yq_hat = Yq_hat.reshape(N, H, len(QUANTILES))


    with CodeTimer('Evaluate Model        ', verbose):
        crps_df = TourismL.get_hierarchical_crps(data=data, Y=Y_test, Y_hat=Yq_hat,
                                                 q_to_pred=QUANTILES,
                                                 model_name='SARIMAX12')

        rmse_df = TourismL.get_hierarchical_rmse(data=data, Y=Y_test, Y_hat=Y_hat,
                                                model_name='SARIMAX12')

    print('CRPS\n', crps_df)
    print('RMSE\n', rmse_df)

    return Y_test, Y_hat, Yq_hat

#Y_test, Y_hat, Yq_hat = run_tourismL_arima(verbose=True)

# Cell
def run_tourismL_poisson_regression(verbose=False):
    with CodeTimer('Read and Parse data   ', verbose):
        directory = './data/hierarchical/TourismL'
        TourismL.preprocess_data(directory=directory, verbose=False)
        data = TourismL.load_process(directory=directory, verbose=False)

        # Declare dataset dimensions
        T = 216 #365
        H = 12  #34
        N = len(data['hier_labels'])

        # Declare and wrangle dataframes
        X_hier_df = data['X_hier_df']
        Y_train_df = X_hier_df.groupby(['unique_id']).tail(T+H).reset_index(drop=True)
        Y_test_df  = Y_train_df.groupby(['unique_id']).tail(H).reset_index(drop=True)
        Y_train_df = Y_train_df.groupby(['unique_id']).head(T).reset_index(drop=True)
        X_test_df  = Y_test_df.drop(['y'], axis=1)

    with CodeTimer('Fit/Predict Model     ', verbose):
        # Fit/Predict Poisson regression
        fcst = StatsForecast(Y_train_df.set_index('unique_id'),
                             models=[(poisson_regression)],
                             freq='M', n_jobs=1)
        Y_hat_df = fcst.forecast(H, level=LEVEL,
                                 xreg=X_test_df.set_index('unique_id')).reset_index()

        # Parse predictions
        Y_test = Y_test_df.y.values
        Y_hat  = Y_hat_df['poisson_regression_mean'].values
        Yq_hat = Y_hat_df.drop(labels=['unique_id', 'ds',
                               'poisson_regression_mean'], axis=1).values

        Y_hat  = Y_hat.reshape(N, H)
        Y_test = Y_test.reshape(N, H)
        Yq_hat = Yq_hat.reshape(N, H, len(QUANTILES))

        with CodeTimer('Evaluate Model        ', verbose):
            crps_df = TourismL.get_hierarchical_crps(data=data,
                                                     Y=Y_test, Y_hat=Yq_hat,
                                                     q_to_pred=QUANTILES,
                                                     model_name='GLM-Poisson')

            rmse_df = TourismL.get_hierarchical_rmse(data=data,
                                                     Y=Y_test, Y_hat=Y_hat,
                                                     model_name='GLM-Poisson')

        print('CRPS\n', crps_df)
        print('RMSE\n', rmse_df)

        return Y_test, Y_hat, Yq_hat

Y_test, Y_hat, Yq_hat = run_tourismL_poisson_regression(verbose=False)

# Cell
def run_favorita_arima(verbose=False):
    with CodeTimer('Read and Parse data   ', verbose):
        directory = './data/hierarchical/Favorita'
        #Favorita.preprocess_data(directory=directory,  sample_size=10, verbose=False)
        data = Favorita.load_process(directory=directory, sample_size=10, verbose=False)

        # Declare dataset dimensions
        T = 130  # 216 365 (100, 0.44) (120, 0.36) (200, 0.4)
        H = 34   # 12
        N = len(data['hier_labels'])

        # Declare and wrangle dataframes
        X_hier_df = data['X_hier_df']
        X_hier_df['y'] = X_hier_df['y'] + 0.001
        Y_train_df = X_hier_df.groupby(['unique_id']).tail(T+H).reset_index(drop=True)
        Y_test_df  = Y_train_df.groupby(['unique_id']).tail(H).reset_index(drop=True)
        Y_train_df = Y_train_df.groupby(['unique_id']).head(T).reset_index(drop=True)
        Y_train_df = Y_train_df[['unique_id', 'ds', 'y']]
        Y_test_df  = Y_test_df[['unique_id', 'ds', 'y']]

    with CodeTimer('Fit/Predict Model     ', verbose):
        # Fit and Predict Poisson regression
        fcst = StatsForecast(Y_train_df.set_index('unique_id'),
                         models=[(auto_arima)],
                         freq='D', n_jobs=1)
        Y_hat_df = fcst.forecast(H, level=LEVEL).reset_index()

        # Parse predictions
        Y_test = Y_test_df.y.values
        Y_hat  = Y_hat_df['auto_arima_season_length-7_mean'].values
        Yq_hat = Y_hat_df.drop(labels=['unique_id', 'ds',
                               'auto_arima_season_length-7_mean'], axis=1).values

        Y_hat  = Y_hat.reshape(10, N, H)
        Y_test = Y_test.reshape(10, N, H)
        Yq_hat = Yq_hat.reshape(10, N, H, len(QUANTILES))

        with CodeTimer('Evaluate Model        ', verbose):
            crps_df = Favorita.get_hierarchical_crps(data=data, Y=Y_test, Y_hat=Yq_hat,
                                                     q_to_pred=QUANTILES,
                                                     model_name='SARIMAX7')

            rmse_df = Favorita.get_hierarchical_rmse(data=data, Y=Y_test, Y_hat=Y_hat,
                                                     model_name='SARIMAX7')

        print('CRPS\n', crps_df)
        print('RMSE\n', rmse_df)

        return Y_test, Y_hat, Yq_hat

# Cell
def run_favorita_poisson_regression(verbose=False):
    with CodeTimer('Read and Parse data   ', verbose):
        directory = './data/hierarchical/Favorita'
        #Favorita.preprocess_data(directory=directory,  sample_size=10, verbose=False)
        data = Favorita.load_process(directory=directory, sample_size=10, verbose=False)

        # Declare dataset dimensions
        T = 130  # 216 365 (100, 0.44) (120, 0.36) (200, 0.4)
        H = 34   # 12
        N = len(data['hier_labels'])

        # Declare and wrangle dataframes
        X_hier_df = data['X_hier_df']
        X_hier_df['y'] = X_hier_df['y'] + 0.001
        Y_train_df = X_hier_df.groupby(['unique_id']).tail(T+H).reset_index(drop=True)
        Y_test_df  = Y_train_df.groupby(['unique_id']).tail(H).reset_index(drop=True)
        Y_train_df = Y_train_df.groupby(['unique_id']).head(T).reset_index(drop=True)
        X_test_df  = Y_test_df.drop(['y'], axis=1)

    with CodeTimer('Fit/Predict Model     ', verbose):
        # Fit and Predict Poisson regression
        fcst = StatsForecast(Y_train_df.set_index('unique_id'),
                         models=[(poisson_regression)],
                         freq='M', n_jobs=1)
        Y_hat_df = fcst.forecast(H, level=LEVEL,
                                 xreg=X_test_df.set_index('unique_id')).reset_index()

        # Parse predictions
        Y_test = Y_test_df.y.values
        Y_hat  = Y_hat_df['poisson_regression_mean'].values
        Yq_hat = Y_hat_df.drop(labels=['unique_id', 'ds',
                               'poisson_regression_mean'], axis=1).values

        Y_hat  = Y_hat.reshape(10, N, H)
        Y_test = Y_test.reshape(10, N, H)
        Yq_hat = Yq_hat.reshape(10, N, H, len(QUANTILES))

        with CodeTimer('Evaluate Model        ', verbose):
            crps_df = Favorita.get_hierarchical_crps(data=data, Y=Y_test, Y_hat=Yq_hat,
                                                     q_to_pred=QUANTILES,
                                                     model_name='GLM-Poisson2')

            rmse_df = Favorita.get_hierarchical_rmse(data=data, Y=Y_test, Y_hat=Y_hat,
                                                     model_name='GLM-Poisson2')

        print('CRPS\n', crps_df)
        print('RMSE\n', rmse_df)

        return Y_test, Y_hat, Yq_hat

# Y_train_df, Y_test_df = run_favorita_poisson_regression(verbose=False)
Y_test, Y_hat, Yq_hat = run_favorita_poisson_regression(verbose=False)