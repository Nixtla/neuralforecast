# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/neuralforecast/',
                'doc_host': 'https://Nixtla.github.io',
                'git_url': 'https://github.com/Nixtla/neuralforecast/',
                'lib_path': 'neuralforecast'},
  'syms': { 'neuralforecast.auto': { 'neuralforecast.auto.AutoDilatedRNN': ('models.html#autodilatedrnn', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoDilatedRNN.__init__': ( 'models.html#autodilatedrnn.__init__',
                                                                                      'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoGRU': ('models.html#autogru', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoGRU.__init__': ('models.html#autogru.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoLSTM': ('models.html#autolstm', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoLSTM.__init__': ('models.html#autolstm.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoMLP': ('models.html#automlp', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoMLP.__init__': ('models.html#automlp.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoNBEATS': ('models.html#autonbeats', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoNBEATS.__init__': ( 'models.html#autonbeats.__init__',
                                                                                  'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoNHITS': ('models.html#autonhits', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoNHITS.__init__': ('models.html#autonhits.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoRNN': ('models.html#autornn', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoRNN.__init__': ('models.html#autornn.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoTCN': ('models.html#autotcn', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoTCN.__init__': ('models.html#autotcn.__init__', 'neuralforecast/auto.py')},
            'neuralforecast.core': { 'neuralforecast.core.NeuralForecast': ('core.html#neuralforecast', 'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.__init__': ( 'core.html#neuralforecast.__init__',
                                                                                      'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast._make_future_df': ( 'core.html#neuralforecast._make_future_df',
                                                                                             'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast._prepare_fit': ( 'core.html#neuralforecast._prepare_fit',
                                                                                          'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.cross_validation': ( 'core.html#neuralforecast.cross_validation',
                                                                                              'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.fit': ('core.html#neuralforecast.fit', 'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.load': ('core.html#neuralforecast.load', 'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.predict': ( 'core.html#neuralforecast.predict',
                                                                                     'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.save': ('core.html#neuralforecast.save', 'neuralforecast/core.py'),
                                     'neuralforecast.core._cv_dates': ('core.html#_cv_dates', 'neuralforecast/core.py')},
            'neuralforecast.losses': { 'neuralforecast.losses.MAE': ('losses.html#mae', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MAE.__call__': ('losses.html#mae.__call__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MAE.__init__': ('losses.html#mae.__init__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MAPE': ('losses.html#mape', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MAPE.__call__': ('losses.html#mape.__call__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MAPE.__init__': ('losses.html#mape.__init__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MASE': ('losses.html#mase', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MASE.__call__': ('losses.html#mase.__call__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MASE.__init__': ('losses.html#mase.__init__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MQLoss': ('losses.html#mqloss', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MQLoss.__call__': ('losses.html#mqloss.__call__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MQLoss.__init__': ('losses.html#mqloss.__init__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MSE': ('losses.html#mse', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MSE.__call__': ('losses.html#mse.__call__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.MSE.__init__': ('losses.html#mse.__init__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.QuantileLoss': ('losses.html#quantileloss', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.QuantileLoss.__call__': ( 'losses.html#quantileloss.__call__',
                                                                                        'neuralforecast/losses.py'),
                                       'neuralforecast.losses.QuantileLoss.__init__': ( 'losses.html#quantileloss.__init__',
                                                                                        'neuralforecast/losses.py'),
                                       'neuralforecast.losses.RMSE': ('losses.html#rmse', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.RMSE.__call__': ('losses.html#rmse.__call__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.RMSE.__init__': ('losses.html#rmse.__init__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.SMAPE': ('losses.html#smape', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.SMAPE.__call__': ('losses.html#smape.__call__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.SMAPE.__init__': ('losses.html#smape.__init__', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses._divide_no_nan': ('losses.html#_divide_no_nan', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.wMQLoss': ('losses.html#wmqloss', 'neuralforecast/losses.py'),
                                       'neuralforecast.losses.wMQLoss.__call__': ( 'losses.html#wmqloss.__call__',
                                                                                   'neuralforecast/losses.py'),
                                       'neuralforecast.losses.wMQLoss.__init__': ( 'losses.html#wmqloss.__init__',
                                                                                   'neuralforecast/losses.py')},
            'neuralforecast.losses.numpy': { 'neuralforecast.losses.numpy._divide_no_nan': ( 'losses.numpy.html#_divide_no_nan',
                                                                                             'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy._metric_protections': ( 'losses.numpy.html#_metric_protections',
                                                                                                  'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.mae': ('losses.numpy.html#mae', 'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.mape': ( 'losses.numpy.html#mape',
                                                                                   'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.mase': ( 'losses.numpy.html#mase',
                                                                                   'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.mqloss': ( 'losses.numpy.html#mqloss',
                                                                                     'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.mse': ('losses.numpy.html#mse', 'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.quantile_loss': ( 'losses.numpy.html#quantile_loss',
                                                                                            'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.rmae': ( 'losses.numpy.html#rmae',
                                                                                   'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.rmse': ( 'losses.numpy.html#rmse',
                                                                                   'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.smape': ( 'losses.numpy.html#smape',
                                                                                    'neuralforecast/losses/numpy.py')},
            'neuralforecast.losses.pytorch': { 'neuralforecast.losses.pytorch.DistributionLoss': ( 'losses.pytorch.html#distributionloss',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.DistributionLoss.__call__': ( 'losses.pytorch.html#distributionloss.__call__',
                                                                                                            'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.DistributionLoss.__init__': ( 'losses.pytorch.html#distributionloss.__init__',
                                                                                                            'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.DistributionLoss.get_distribution': ( 'losses.pytorch.html#distributionloss.get_distribution',
                                                                                                                    'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.DistributionLoss.sample': ( 'losses.pytorch.html#distributionloss.sample',
                                                                                                          'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM': ( 'losses.pytorch.html#gmm',
                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM.__call__': ( 'losses.pytorch.html#gmm.__call__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM.__init__': ( 'losses.pytorch.html#gmm.__init__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM.neglog_likelihood': ( 'losses.pytorch.html#gmm.neglog_likelihood',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM.sample': ( 'losses.pytorch.html#gmm.sample',
                                                                                             'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAE': ( 'losses.pytorch.html#mae',
                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAE.__call__': ( 'losses.pytorch.html#mae.__call__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAE.__init__': ( 'losses.pytorch.html#mae.__init__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAE.domain_map': ( 'losses.pytorch.html#mae.domain_map',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAPE': ( 'losses.pytorch.html#mape',
                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAPE.__call__': ( 'losses.pytorch.html#mape.__call__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAPE.__init__': ( 'losses.pytorch.html#mape.__init__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAPE.domain_map': ( 'losses.pytorch.html#mape.domain_map',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MASE': ( 'losses.pytorch.html#mase',
                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MASE.__call__': ( 'losses.pytorch.html#mase.__call__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MASE.__init__': ( 'losses.pytorch.html#mase.__init__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MASE.domain_map': ( 'losses.pytorch.html#mase.domain_map',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MQLoss': ( 'losses.pytorch.html#mqloss',
                                                                                         'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MQLoss.__call__': ( 'losses.pytorch.html#mqloss.__call__',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MQLoss.__init__': ( 'losses.pytorch.html#mqloss.__init__',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MQLoss.domain_map': ( 'losses.pytorch.html#mqloss.domain_map',
                                                                                                    'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MSE': ( 'losses.pytorch.html#mse',
                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MSE.__call__': ( 'losses.pytorch.html#mse.__call__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MSE.__init__': ( 'losses.pytorch.html#mse.__init__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MSE.domain_map': ( 'losses.pytorch.html#mse.domain_map',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM': ( 'losses.pytorch.html#pmm',
                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.__call__': ( 'losses.pytorch.html#pmm.__call__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.__init__': ( 'losses.pytorch.html#pmm.__init__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.domain_map': ( 'losses.pytorch.html#pmm.domain_map',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.neglog_likelihood': ( 'losses.pytorch.html#pmm.neglog_likelihood',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.sample': ( 'losses.pytorch.html#pmm.sample',
                                                                                             'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.QuantileLoss': ( 'losses.pytorch.html#quantileloss',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.QuantileLoss.__call__': ( 'losses.pytorch.html#quantileloss.__call__',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.QuantileLoss.__init__': ( 'losses.pytorch.html#quantileloss.__init__',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.QuantileLoss.domain_map': ( 'losses.pytorch.html#quantileloss.domain_map',
                                                                                                          'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.RMSE': ( 'losses.pytorch.html#rmse',
                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.RMSE.__call__': ( 'losses.pytorch.html#rmse.__call__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.RMSE.__init__': ( 'losses.pytorch.html#rmse.__init__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.RMSE.domain_map': ( 'losses.pytorch.html#rmse.domain_map',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.SMAPE': ( 'losses.pytorch.html#smape',
                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.SMAPE.__call__': ( 'losses.pytorch.html#smape.__call__',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.SMAPE.__init__': ( 'losses.pytorch.html#smape.__init__',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.SMAPE.domain_map': ( 'losses.pytorch.html#smape.domain_map',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch._divide_no_nan': ( 'losses.pytorch.html#_divide_no_nan',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.level_to_outputs': ( 'losses.pytorch.html#level_to_outputs',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.normal_domain_map': ( 'losses.pytorch.html#normal_domain_map',
                                                                                                    'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.poisson_domain_map': ( 'losses.pytorch.html#poisson_domain_map',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.quantiles_to_outputs': ( 'losses.pytorch.html#quantiles_to_outputs',
                                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.student_domain_map': ( 'losses.pytorch.html#student_domain_map',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.wMQLoss': ( 'losses.pytorch.html#wmqloss',
                                                                                          'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.wMQLoss.__call__': ( 'losses.pytorch.html#wmqloss.__call__',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.wMQLoss.__init__': ( 'losses.pytorch.html#wmqloss.__init__',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.wMQLoss.domain_map': ( 'losses.pytorch.html#wmqloss.domain_map',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.weighted_average': ( 'losses.pytorch.html#weighted_average',
                                                                                                   'neuralforecast/losses/pytorch.py')},
            'neuralforecast.models.dilated_rnn': { 'neuralforecast.models.dilated_rnn.AttentiveLSTMLayer': ( 'models.dilated_rnn.html#attentivelstmlayer',
                                                                                                             'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.AttentiveLSTMLayer.__init__': ( 'models.dilated_rnn.html#attentivelstmlayer.__init__',
                                                                                                                      'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.AttentiveLSTMLayer.forward': ( 'models.dilated_rnn.html#attentivelstmlayer.forward',
                                                                                                                     'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN': ( 'models.dilated_rnn.html#drnn',
                                                                                               'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN.__init__': ( 'models.dilated_rnn.html#drnn.__init__',
                                                                                                        'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN._apply_cell': ( 'models.dilated_rnn.html#drnn._apply_cell',
                                                                                                           'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN._pad_inputs': ( 'models.dilated_rnn.html#drnn._pad_inputs',
                                                                                                           'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN._prepare_inputs': ( 'models.dilated_rnn.html#drnn._prepare_inputs',
                                                                                                               'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN._split_outputs': ( 'models.dilated_rnn.html#drnn._split_outputs',
                                                                                                              'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN._unpad_outputs': ( 'models.dilated_rnn.html#drnn._unpad_outputs',
                                                                                                              'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN.drnn_layer': ( 'models.dilated_rnn.html#drnn.drnn_layer',
                                                                                                          'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN.forward': ( 'models.dilated_rnn.html#drnn.forward',
                                                                                                       'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DilatedRNN': ( 'models.dilated_rnn.html#dilatedrnn',
                                                                                                     'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DilatedRNN.__init__': ( 'models.dilated_rnn.html#dilatedrnn.__init__',
                                                                                                              'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DilatedRNN.forward': ( 'models.dilated_rnn.html#dilatedrnn.forward',
                                                                                                             'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.LSTMCell': ( 'models.dilated_rnn.html#lstmcell',
                                                                                                   'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.LSTMCell.__init__': ( 'models.dilated_rnn.html#lstmcell.__init__',
                                                                                                            'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.LSTMCell.forward': ( 'models.dilated_rnn.html#lstmcell.forward',
                                                                                                           'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMCell': ( 'models.dilated_rnn.html#reslstmcell',
                                                                                                      'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMCell.__init__': ( 'models.dilated_rnn.html#reslstmcell.__init__',
                                                                                                               'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMCell.forward': ( 'models.dilated_rnn.html#reslstmcell.forward',
                                                                                                              'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMLayer': ( 'models.dilated_rnn.html#reslstmlayer',
                                                                                                       'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMLayer.__init__': ( 'models.dilated_rnn.html#reslstmlayer.__init__',
                                                                                                                'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMLayer.forward': ( 'models.dilated_rnn.html#reslstmlayer.forward',
                                                                                                               'neuralforecast/models/dilated_rnn.py')},
            'neuralforecast.models.gru': { 'neuralforecast.models.gru.GRU': ('models.gru.html#gru', 'neuralforecast/models/gru.py'),
                                           'neuralforecast.models.gru.GRU.__init__': ( 'models.gru.html#gru.__init__',
                                                                                       'neuralforecast/models/gru.py'),
                                           'neuralforecast.models.gru.GRU.forward': ( 'models.gru.html#gru.forward',
                                                                                      'neuralforecast/models/gru.py')},
            'neuralforecast.models.lstm': { 'neuralforecast.models.lstm.LSTM': ('models.lstm.html#lstm', 'neuralforecast/models/lstm.py'),
                                            'neuralforecast.models.lstm.LSTM.__init__': ( 'models.lstm.html#lstm.__init__',
                                                                                          'neuralforecast/models/lstm.py'),
                                            'neuralforecast.models.lstm.LSTM.forward': ( 'models.lstm.html#lstm.forward',
                                                                                         'neuralforecast/models/lstm.py')},
            'neuralforecast.models.mlp': { 'neuralforecast.models.mlp.MLP': ('models.mlp.html#mlp', 'neuralforecast/models/mlp.py'),
                                           'neuralforecast.models.mlp.MLP.__init__': ( 'models.mlp.html#mlp.__init__',
                                                                                       'neuralforecast/models/mlp.py'),
                                           'neuralforecast.models.mlp.MLP.forward': ( 'models.mlp.html#mlp.forward',
                                                                                      'neuralforecast/models/mlp.py')},
            'neuralforecast.models.nbeats': { 'neuralforecast.models.nbeats.IdentityBasis': ( 'models.nbeats.html#identitybasis',
                                                                                              'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.IdentityBasis.__init__': ( 'models.nbeats.html#identitybasis.__init__',
                                                                                                       'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.IdentityBasis.forward': ( 'models.nbeats.html#identitybasis.forward',
                                                                                                      'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATS': ( 'models.nbeats.html#nbeats',
                                                                                       'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATS.__init__': ( 'models.nbeats.html#nbeats.__init__',
                                                                                                'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATS.create_stack': ( 'models.nbeats.html#nbeats.create_stack',
                                                                                                    'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATS.forward': ( 'models.nbeats.html#nbeats.forward',
                                                                                               'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATSBlock': ( 'models.nbeats.html#nbeatsblock',
                                                                                            'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATSBlock.__init__': ( 'models.nbeats.html#nbeatsblock.__init__',
                                                                                                     'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATSBlock.forward': ( 'models.nbeats.html#nbeatsblock.forward',
                                                                                                    'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.SeasonalityBasis': ( 'models.nbeats.html#seasonalitybasis',
                                                                                                 'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.SeasonalityBasis.__init__': ( 'models.nbeats.html#seasonalitybasis.__init__',
                                                                                                          'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.SeasonalityBasis.forward': ( 'models.nbeats.html#seasonalitybasis.forward',
                                                                                                         'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.TrendBasis': ( 'models.nbeats.html#trendbasis',
                                                                                           'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.TrendBasis.__init__': ( 'models.nbeats.html#trendbasis.__init__',
                                                                                                    'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.TrendBasis.forward': ( 'models.nbeats.html#trendbasis.forward',
                                                                                                   'neuralforecast/models/nbeats.py')},
            'neuralforecast.models.nbeatsx': { 'neuralforecast.models.nbeatsx.IdentityBasis': ( 'models.nbeatsx.html#identitybasis',
                                                                                                'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.IdentityBasis.__init__': ( 'models.nbeatsx.html#identitybasis.__init__',
                                                                                                         'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.IdentityBasis.forward': ( 'models.nbeatsx.html#identitybasis.forward',
                                                                                                        'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSBlock': ( 'models.nbeatsx.html#nbeatsblock',
                                                                                              'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSBlock.__init__': ( 'models.nbeatsx.html#nbeatsblock.__init__',
                                                                                                       'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSBlock.forward': ( 'models.nbeatsx.html#nbeatsblock.forward',
                                                                                                      'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSx': ( 'models.nbeatsx.html#nbeatsx',
                                                                                          'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSx.__init__': ( 'models.nbeatsx.html#nbeatsx.__init__',
                                                                                                   'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSx.create_stack': ( 'models.nbeatsx.html#nbeatsx.create_stack',
                                                                                                       'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSx.forward': ( 'models.nbeatsx.html#nbeatsx.forward',
                                                                                                  'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.SeasonalityBasis': ( 'models.nbeatsx.html#seasonalitybasis',
                                                                                                   'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.SeasonalityBasis.__init__': ( 'models.nbeatsx.html#seasonalitybasis.__init__',
                                                                                                            'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.SeasonalityBasis.forward': ( 'models.nbeatsx.html#seasonalitybasis.forward',
                                                                                                           'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.TrendBasis': ( 'models.nbeatsx.html#trendbasis',
                                                                                             'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.TrendBasis.__init__': ( 'models.nbeatsx.html#trendbasis.__init__',
                                                                                                      'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.TrendBasis.forward': ( 'models.nbeatsx.html#trendbasis.forward',
                                                                                                     'neuralforecast/models/nbeatsx.py')},
            'neuralforecast.models.nhits': { 'neuralforecast.models.nhits.NHITS': ( 'models.nhits.html#nhits',
                                                                                    'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITS.__init__': ( 'models.nhits.html#nhits.__init__',
                                                                                             'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITS.create_stack': ( 'models.nhits.html#nhits.create_stack',
                                                                                                 'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITS.forward': ( 'models.nhits.html#nhits.forward',
                                                                                            'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITSBlock': ( 'models.nhits.html#nhitsblock',
                                                                                         'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITSBlock.__init__': ( 'models.nhits.html#nhitsblock.__init__',
                                                                                                  'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITSBlock.forward': ( 'models.nhits.html#nhitsblock.forward',
                                                                                                 'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits._IdentityBasis': ( 'models.nhits.html#_identitybasis',
                                                                                             'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits._IdentityBasis.__init__': ( 'models.nhits.html#_identitybasis.__init__',
                                                                                                      'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits._IdentityBasis.forward': ( 'models.nhits.html#_identitybasis.forward',
                                                                                                     'neuralforecast/models/nhits.py')},
            'neuralforecast.models.rnn': { 'neuralforecast.models.rnn.RNN': ('models.rnn.html#rnn', 'neuralforecast/models/rnn.py'),
                                           'neuralforecast.models.rnn.RNN.__init__': ( 'models.rnn.html#rnn.__init__',
                                                                                       'neuralforecast/models/rnn.py'),
                                           'neuralforecast.models.rnn.RNN.forward': ( 'models.rnn.html#rnn.forward',
                                                                                      'neuralforecast/models/rnn.py')},
            'neuralforecast.models.tcn': { 'neuralforecast.models.tcn.TCN': ('models.tcn.html#tcn', 'neuralforecast/models/tcn.py'),
                                           'neuralforecast.models.tcn.TCN.__init__': ( 'models.tcn.html#tcn.__init__',
                                                                                       'neuralforecast/models/tcn.py'),
                                           'neuralforecast.models.tcn.TCN.forward': ( 'models.tcn.html#tcn.forward',
                                                                                      'neuralforecast/models/tcn.py')},
            'neuralforecast.models.tft': { 'neuralforecast.models.tft.GLU': ('models.tft.html#glu', 'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.GLU.__init__': ( 'models.tft.html#glu.__init__',
                                                                                       'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.GLU.forward': ( 'models.tft.html#glu.forward',
                                                                                      'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.GRN': ('models.tft.html#grn', 'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.GRN.__init__': ( 'models.tft.html#grn.__init__',
                                                                                       'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.GRN.forward': ( 'models.tft.html#grn.forward',
                                                                                      'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.InterpretableMultiHeadAttention': ( 'models.tft.html#interpretablemultiheadattention',
                                                                                                          'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.InterpretableMultiHeadAttention.__init__': ( 'models.tft.html#interpretablemultiheadattention.__init__',
                                                                                                                   'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.InterpretableMultiHeadAttention.forward': ( 'models.tft.html#interpretablemultiheadattention.forward',
                                                                                                                  'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.MaybeLayerNorm': ( 'models.tft.html#maybelayernorm',
                                                                                         'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.MaybeLayerNorm.__init__': ( 'models.tft.html#maybelayernorm.__init__',
                                                                                                  'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.MaybeLayerNorm.forward': ( 'models.tft.html#maybelayernorm.forward',
                                                                                                 'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.StaticCovariateEncoder': ( 'models.tft.html#staticcovariateencoder',
                                                                                                 'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.StaticCovariateEncoder.__init__': ( 'models.tft.html#staticcovariateencoder.__init__',
                                                                                                          'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.StaticCovariateEncoder.forward': ( 'models.tft.html#staticcovariateencoder.forward',
                                                                                                         'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFT': ('models.tft.html#tft', 'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFT.__init__': ( 'models.tft.html#tft.__init__',
                                                                                       'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFT.forward': ( 'models.tft.html#tft.forward',
                                                                                      'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFT.predict_step': ( 'models.tft.html#tft.predict_step',
                                                                                           'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFT.training_step': ( 'models.tft.html#tft.training_step',
                                                                                            'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFTEmbedding': ( 'models.tft.html#tftembedding',
                                                                                       'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFTEmbedding.__init__': ( 'models.tft.html#tftembedding.__init__',
                                                                                                'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFTEmbedding._apply_embedding': ( 'models.tft.html#tftembedding._apply_embedding',
                                                                                                        'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFTEmbedding.forward': ( 'models.tft.html#tftembedding.forward',
                                                                                               'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalCovariateEncoder': ( 'models.tft.html#temporalcovariateencoder',
                                                                                                   'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalCovariateEncoder.__init__': ( 'models.tft.html#temporalcovariateencoder.__init__',
                                                                                                            'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalCovariateEncoder.forward': ( 'models.tft.html#temporalcovariateencoder.forward',
                                                                                                           'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalFusionDecoder': ( 'models.tft.html#temporalfusiondecoder',
                                                                                                'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalFusionDecoder.__init__': ( 'models.tft.html#temporalfusiondecoder.__init__',
                                                                                                         'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalFusionDecoder.forward': ( 'models.tft.html#temporalfusiondecoder.forward',
                                                                                                        'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.VariableSelectionNetwork': ( 'models.tft.html#variableselectionnetwork',
                                                                                                   'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.VariableSelectionNetwork.__init__': ( 'models.tft.html#variableselectionnetwork.__init__',
                                                                                                            'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.VariableSelectionNetwork.forward': ( 'models.tft.html#variableselectionnetwork.forward',
                                                                                                           'neuralforecast/models/tft.py')},
            'neuralforecast.tsdataset': { 'neuralforecast.tsdataset.TimeSeriesDataModule': ( 'tsdataset.html#timeseriesdatamodule',
                                                                                             'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataModule.__init__': ( 'tsdataset.html#timeseriesdatamodule.__init__',
                                                                                                      'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataModule.predict_dataloader': ( 'tsdataset.html#timeseriesdatamodule.predict_dataloader',
                                                                                                                'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataModule.train_dataloader': ( 'tsdataset.html#timeseriesdatamodule.train_dataloader',
                                                                                                              'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataModule.val_dataloader': ( 'tsdataset.html#timeseriesdatamodule.val_dataloader',
                                                                                                            'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset': ( 'tsdataset.html#timeseriesdataset',
                                                                                          'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.__eq__': ( 'tsdataset.html#timeseriesdataset.__eq__',
                                                                                                 'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.__getitem__': ( 'tsdataset.html#timeseriesdataset.__getitem__',
                                                                                                      'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.__init__': ( 'tsdataset.html#timeseriesdataset.__init__',
                                                                                                   'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.__len__': ( 'tsdataset.html#timeseriesdataset.__len__',
                                                                                                  'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.__repr__': ( 'tsdataset.html#timeseriesdataset.__repr__',
                                                                                                   'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.from_df': ( 'tsdataset.html#timeseriesdataset.from_df',
                                                                                                  'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.update_dataset': ( 'tsdataset.html#timeseriesdataset.update_dataset',
                                                                                                         'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesLoader': ( 'tsdataset.html#timeseriesloader',
                                                                                         'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesLoader.__init__': ( 'tsdataset.html#timeseriesloader.__init__',
                                                                                                  'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesLoader._collate_fn': ( 'tsdataset.html#timeseriesloader._collate_fn',
                                                                                                     'neuralforecast/tsdataset.py')},
            'neuralforecast.utils': {'neuralforecast.utils.generate_series': ('utils.html#generate_series', 'neuralforecast/utils.py')}}}
