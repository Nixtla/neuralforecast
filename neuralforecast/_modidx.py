# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/neuralforecast/',
                'doc_host': 'https://Nixtla.github.io',
                'git_url': 'https://github.com/Nixtla/neuralforecast/',
                'lib_path': 'neuralforecast'},
  'syms': { 'neuralforecast.auto': { 'neuralforecast.auto.AutoAutoformer': ('models.html#autoautoformer', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoAutoformer.__init__': ( 'models.html#autoautoformer.__init__',
                                                                                      'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoDeepAR': ('models.html#autodeepar', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoDeepAR.__init__': ( 'models.html#autodeepar.__init__',
                                                                                  'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoDilatedRNN': ('models.html#autodilatedrnn', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoDilatedRNN.__init__': ( 'models.html#autodilatedrnn.__init__',
                                                                                      'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoFEDformer': ('models.html#autofedformer', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoFEDformer.__init__': ( 'models.html#autofedformer.__init__',
                                                                                     'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoGRU': ('models.html#autogru', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoGRU.__init__': ('models.html#autogru.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoHINT': ('models.html#autohint', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoHINT.__init__': ('models.html#autohint.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoHINT._fit_model': ( 'models.html#autohint._fit_model',
                                                                                  'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoInformer': ('models.html#autoinformer', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoInformer.__init__': ( 'models.html#autoinformer.__init__',
                                                                                    'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoLSTM': ('models.html#autolstm', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoLSTM.__init__': ('models.html#autolstm.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoMLP': ('models.html#automlp', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoMLP.__init__': ('models.html#automlp.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoNBEATS': ('models.html#autonbeats', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoNBEATS.__init__': ( 'models.html#autonbeats.__init__',
                                                                                  'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoNBEATSx': ('models.html#autonbeatsx', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoNBEATSx.__init__': ( 'models.html#autonbeatsx.__init__',
                                                                                   'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoNHITS': ('models.html#autonhits', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoNHITS.__init__': ('models.html#autonhits.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoPatchTST': ('models.html#autopatchtst', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoPatchTST.__init__': ( 'models.html#autopatchtst.__init__',
                                                                                    'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoRNN': ('models.html#autornn', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoRNN.__init__': ('models.html#autornn.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoStemGNN': ('models.html#autostemgnn', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoStemGNN.__init__': ( 'models.html#autostemgnn.__init__',
                                                                                   'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoTCN': ('models.html#autotcn', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoTCN.__init__': ('models.html#autotcn.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoTFT': ('models.html#autotft', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoTFT.__init__': ('models.html#autotft.__init__', 'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoVanillaTransformer': ( 'models.html#autovanillatransformer',
                                                                                     'neuralforecast/auto.py'),
                                     'neuralforecast.auto.AutoVanillaTransformer.__init__': ( 'models.html#autovanillatransformer.__init__',
                                                                                              'neuralforecast/auto.py')},
            'neuralforecast.core': { 'neuralforecast.core.NeuralForecast': ('core.html#neuralforecast', 'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.__init__': ( 'core.html#neuralforecast.__init__',
                                                                                      'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast._prepare_fit': ( 'core.html#neuralforecast._prepare_fit',
                                                                                          'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.cross_validation': ( 'core.html#neuralforecast.cross_validation',
                                                                                              'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.fit': ('core.html#neuralforecast.fit', 'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.load': ('core.html#neuralforecast.load', 'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.predict': ( 'core.html#neuralforecast.predict',
                                                                                     'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.predict_insample': ( 'core.html#neuralforecast.predict_insample',
                                                                                              'neuralforecast/core.py'),
                                     'neuralforecast.core.NeuralForecast.save': ('core.html#neuralforecast.save', 'neuralforecast/core.py'),
                                     'neuralforecast.core._cv_dates': ('core.html#_cv_dates', 'neuralforecast/core.py'),
                                     'neuralforecast.core._future_dates': ('core.html#_future_dates', 'neuralforecast/core.py'),
                                     'neuralforecast.core._insample_dates': ('core.html#_insample_dates', 'neuralforecast/core.py')},
            'neuralforecast.losses.numpy': { 'neuralforecast.losses.numpy._divide_no_nan': ( 'losses.numpy.html#_divide_no_nan',
                                                                                             'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy._metric_protections': ( 'losses.numpy.html#_metric_protections',
                                                                                                  'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.mae': ('losses.numpy.html#mae', 'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.mape': ( 'losses.numpy.html#mape',
                                                                                   'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.mase': ( 'losses.numpy.html#mase',
                                                                                   'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.mqloss': ( 'losses.numpy.html#mqloss',
                                                                                     'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.mse': ('losses.numpy.html#mse', 'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.quantile_loss': ( 'losses.numpy.html#quantile_loss',
                                                                                            'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.rmae': ( 'losses.numpy.html#rmae',
                                                                                   'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.rmse': ( 'losses.numpy.html#rmse',
                                                                                   'neuralforecast/losses/numpy.py'),
                                             'neuralforecast.losses.numpy.smape': ( 'losses.numpy.html#smape',
                                                                                    'neuralforecast/losses/numpy.py')},
            'neuralforecast.losses.pytorch': { 'neuralforecast.losses.pytorch.Accuracy': ( 'losses.pytorch.html#accuracy',
                                                                                           'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.Accuracy.__call__': ( 'losses.pytorch.html#accuracy.__call__',
                                                                                                    'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.Accuracy.__init__': ( 'losses.pytorch.html#accuracy.__init__',
                                                                                                    'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.Accuracy.domain_map': ( 'losses.pytorch.html#accuracy.domain_map',
                                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.DistributionLoss': ( 'losses.pytorch.html#distributionloss',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.DistributionLoss.__call__': ( 'losses.pytorch.html#distributionloss.__call__',
                                                                                                            'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.DistributionLoss.__init__': ( 'losses.pytorch.html#distributionloss.__init__',
                                                                                                            'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.DistributionLoss.get_distribution': ( 'losses.pytorch.html#distributionloss.get_distribution',
                                                                                                                    'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.DistributionLoss.sample': ( 'losses.pytorch.html#distributionloss.sample',
                                                                                                          'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM': ( 'losses.pytorch.html#gmm',
                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM.__call__': ( 'losses.pytorch.html#gmm.__call__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM.__init__': ( 'losses.pytorch.html#gmm.__init__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM.domain_map': ( 'losses.pytorch.html#gmm.domain_map',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM.neglog_likelihood': ( 'losses.pytorch.html#gmm.neglog_likelihood',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM.sample': ( 'losses.pytorch.html#gmm.sample',
                                                                                             'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.GMM.scale_decouple': ( 'losses.pytorch.html#gmm.scale_decouple',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberLoss': ( 'losses.pytorch.html#huberloss',
                                                                                            'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberLoss.__call__': ( 'losses.pytorch.html#huberloss.__call__',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberLoss.__init__': ( 'losses.pytorch.html#huberloss.__init__',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberLoss.domain_map': ( 'losses.pytorch.html#huberloss.domain_map',
                                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberMQLoss': ( 'losses.pytorch.html#hubermqloss',
                                                                                              'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberMQLoss.__call__': ( 'losses.pytorch.html#hubermqloss.__call__',
                                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberMQLoss.__init__': ( 'losses.pytorch.html#hubermqloss.__init__',
                                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberMQLoss.domain_map': ( 'losses.pytorch.html#hubermqloss.domain_map',
                                                                                                         'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberQLoss': ( 'losses.pytorch.html#huberqloss',
                                                                                             'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberQLoss.__call__': ( 'losses.pytorch.html#huberqloss.__call__',
                                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberQLoss.__init__': ( 'losses.pytorch.html#huberqloss.__init__',
                                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.HuberQLoss.domain_map': ( 'losses.pytorch.html#huberqloss.domain_map',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAE': ( 'losses.pytorch.html#mae',
                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAE.__call__': ( 'losses.pytorch.html#mae.__call__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAE.__init__': ( 'losses.pytorch.html#mae.__init__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAE.domain_map': ( 'losses.pytorch.html#mae.domain_map',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAPE': ( 'losses.pytorch.html#mape',
                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAPE.__call__': ( 'losses.pytorch.html#mape.__call__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAPE.__init__': ( 'losses.pytorch.html#mape.__init__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MAPE.domain_map': ( 'losses.pytorch.html#mape.domain_map',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MASE': ( 'losses.pytorch.html#mase',
                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MASE.__call__': ( 'losses.pytorch.html#mase.__call__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MASE.__init__': ( 'losses.pytorch.html#mase.__init__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MASE.domain_map': ( 'losses.pytorch.html#mase.domain_map',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MQLoss': ( 'losses.pytorch.html#mqloss',
                                                                                         'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MQLoss.__call__': ( 'losses.pytorch.html#mqloss.__call__',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MQLoss.__init__': ( 'losses.pytorch.html#mqloss.__init__',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MQLoss.domain_map': ( 'losses.pytorch.html#mqloss.domain_map',
                                                                                                    'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MSE': ( 'losses.pytorch.html#mse',
                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MSE.__call__': ( 'losses.pytorch.html#mse.__call__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MSE.__init__': ( 'losses.pytorch.html#mse.__init__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.MSE.domain_map': ( 'losses.pytorch.html#mse.domain_map',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.NBMM': ( 'losses.pytorch.html#nbmm',
                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.NBMM.__call__': ( 'losses.pytorch.html#nbmm.__call__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.NBMM.__init__': ( 'losses.pytorch.html#nbmm.__init__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.NBMM.domain_map': ( 'losses.pytorch.html#nbmm.domain_map',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.NBMM.neglog_likelihood': ( 'losses.pytorch.html#nbmm.neglog_likelihood',
                                                                                                         'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.NBMM.sample': ( 'losses.pytorch.html#nbmm.sample',
                                                                                              'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.NBMM.scale_decouple': ( 'losses.pytorch.html#nbmm.scale_decouple',
                                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM': ( 'losses.pytorch.html#pmm',
                                                                                      'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.__call__': ( 'losses.pytorch.html#pmm.__call__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.__init__': ( 'losses.pytorch.html#pmm.__init__',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.domain_map': ( 'losses.pytorch.html#pmm.domain_map',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.neglog_likelihood': ( 'losses.pytorch.html#pmm.neglog_likelihood',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.sample': ( 'losses.pytorch.html#pmm.sample',
                                                                                             'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.PMM.scale_decouple': ( 'losses.pytorch.html#pmm.scale_decouple',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.QuantileLoss': ( 'losses.pytorch.html#quantileloss',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.QuantileLoss.__call__': ( 'losses.pytorch.html#quantileloss.__call__',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.QuantileLoss.__init__': ( 'losses.pytorch.html#quantileloss.__init__',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.QuantileLoss.domain_map': ( 'losses.pytorch.html#quantileloss.domain_map',
                                                                                                          'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.RMSE': ( 'losses.pytorch.html#rmse',
                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.RMSE.__call__': ( 'losses.pytorch.html#rmse.__call__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.RMSE.__init__': ( 'losses.pytorch.html#rmse.__init__',
                                                                                                'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.RMSE.domain_map': ( 'losses.pytorch.html#rmse.domain_map',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.SMAPE': ( 'losses.pytorch.html#smape',
                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.SMAPE.__call__': ( 'losses.pytorch.html#smape.__call__',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.SMAPE.__init__': ( 'losses.pytorch.html#smape.__init__',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.SMAPE.domain_map': ( 'losses.pytorch.html#smape.domain_map',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.TukeyLoss': ( 'losses.pytorch.html#tukeyloss',
                                                                                            'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.TukeyLoss.__call__': ( 'losses.pytorch.html#tukeyloss.__call__',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.TukeyLoss.__init__': ( 'losses.pytorch.html#tukeyloss.__init__',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.TukeyLoss.domain_map': ( 'losses.pytorch.html#tukeyloss.domain_map',
                                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.TukeyLoss.masked_mean': ( 'losses.pytorch.html#tukeyloss.masked_mean',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.Tweedie': ( 'losses.pytorch.html#tweedie',
                                                                                          'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.Tweedie.__init__': ( 'losses.pytorch.html#tweedie.__init__',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.Tweedie.log_prob': ( 'losses.pytorch.html#tweedie.log_prob',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.Tweedie.mean': ( 'losses.pytorch.html#tweedie.mean',
                                                                                               'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.Tweedie.sample': ( 'losses.pytorch.html#tweedie.sample',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.Tweedie.variance': ( 'losses.pytorch.html#tweedie.variance',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch._divide_no_nan': ( 'losses.pytorch.html#_divide_no_nan',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.bernoulli_domain_map': ( 'losses.pytorch.html#bernoulli_domain_map',
                                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.bernoulli_scale_decouple': ( 'losses.pytorch.html#bernoulli_scale_decouple',
                                                                                                           'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.est_alpha': ( 'losses.pytorch.html#est_alpha',
                                                                                            'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.est_beta': ( 'losses.pytorch.html#est_beta',
                                                                                           'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.est_lambda': ( 'losses.pytorch.html#est_lambda',
                                                                                             'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.level_to_outputs': ( 'losses.pytorch.html#level_to_outputs',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.nbinomial_domain_map': ( 'losses.pytorch.html#nbinomial_domain_map',
                                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.nbinomial_scale_decouple': ( 'losses.pytorch.html#nbinomial_scale_decouple',
                                                                                                           'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.normal_domain_map': ( 'losses.pytorch.html#normal_domain_map',
                                                                                                    'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.normal_scale_decouple': ( 'losses.pytorch.html#normal_scale_decouple',
                                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.poisson_domain_map': ( 'losses.pytorch.html#poisson_domain_map',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.poisson_scale_decouple': ( 'losses.pytorch.html#poisson_scale_decouple',
                                                                                                         'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.quantiles_to_outputs': ( 'losses.pytorch.html#quantiles_to_outputs',
                                                                                                       'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.relMSE': ( 'losses.pytorch.html#relmse',
                                                                                         'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.relMSE.__call__': ( 'losses.pytorch.html#relmse.__call__',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.relMSE.__init__': ( 'losses.pytorch.html#relmse.__init__',
                                                                                                  'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.sCRPS': ( 'losses.pytorch.html#scrps',
                                                                                        'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.sCRPS.__call__': ( 'losses.pytorch.html#scrps.__call__',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.sCRPS.__init__': ( 'losses.pytorch.html#scrps.__init__',
                                                                                                 'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.student_domain_map': ( 'losses.pytorch.html#student_domain_map',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.student_scale_decouple': ( 'losses.pytorch.html#student_scale_decouple',
                                                                                                         'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.tweedie_domain_map': ( 'losses.pytorch.html#tweedie_domain_map',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.tweedie_scale_decouple': ( 'losses.pytorch.html#tweedie_scale_decouple',
                                                                                                         'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.wMQLoss': ( 'losses.pytorch.html#wmqloss',
                                                                                          'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.wMQLoss.__call__': ( 'losses.pytorch.html#wmqloss.__call__',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.wMQLoss.__init__': ( 'losses.pytorch.html#wmqloss.__init__',
                                                                                                   'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.wMQLoss.domain_map': ( 'losses.pytorch.html#wmqloss.domain_map',
                                                                                                     'neuralforecast/losses/pytorch.py'),
                                               'neuralforecast.losses.pytorch.weighted_average': ( 'losses.pytorch.html#weighted_average',
                                                                                                   'neuralforecast/losses/pytorch.py')},
            'neuralforecast.models.autoformer': { 'neuralforecast.models.autoformer.AutoCorrelation': ( 'models.autoformer.html#autocorrelation',
                                                                                                        'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.AutoCorrelation.__init__': ( 'models.autoformer.html#autocorrelation.__init__',
                                                                                                                 'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.AutoCorrelation.forward': ( 'models.autoformer.html#autocorrelation.forward',
                                                                                                                'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.AutoCorrelation.time_delay_agg_full': ( 'models.autoformer.html#autocorrelation.time_delay_agg_full',
                                                                                                                            'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.AutoCorrelation.time_delay_agg_inference': ( 'models.autoformer.html#autocorrelation.time_delay_agg_inference',
                                                                                                                                 'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.AutoCorrelation.time_delay_agg_training': ( 'models.autoformer.html#autocorrelation.time_delay_agg_training',
                                                                                                                                'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.AutoCorrelationLayer': ( 'models.autoformer.html#autocorrelationlayer',
                                                                                                             'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.AutoCorrelationLayer.__init__': ( 'models.autoformer.html#autocorrelationlayer.__init__',
                                                                                                                      'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.AutoCorrelationLayer.forward': ( 'models.autoformer.html#autocorrelationlayer.forward',
                                                                                                                     'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.Autoformer': ( 'models.autoformer.html#autoformer',
                                                                                                   'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.Autoformer.__init__': ( 'models.autoformer.html#autoformer.__init__',
                                                                                                            'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.Autoformer.forward': ( 'models.autoformer.html#autoformer.forward',
                                                                                                           'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.Decoder': ( 'models.autoformer.html#decoder',
                                                                                                'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.Decoder.__init__': ( 'models.autoformer.html#decoder.__init__',
                                                                                                         'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.Decoder.forward': ( 'models.autoformer.html#decoder.forward',
                                                                                                        'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.DecoderLayer': ( 'models.autoformer.html#decoderlayer',
                                                                                                     'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.DecoderLayer.__init__': ( 'models.autoformer.html#decoderlayer.__init__',
                                                                                                              'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.DecoderLayer.forward': ( 'models.autoformer.html#decoderlayer.forward',
                                                                                                             'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.Encoder': ( 'models.autoformer.html#encoder',
                                                                                                'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.Encoder.__init__': ( 'models.autoformer.html#encoder.__init__',
                                                                                                         'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.Encoder.forward': ( 'models.autoformer.html#encoder.forward',
                                                                                                        'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.EncoderLayer': ( 'models.autoformer.html#encoderlayer',
                                                                                                     'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.EncoderLayer.__init__': ( 'models.autoformer.html#encoderlayer.__init__',
                                                                                                              'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.EncoderLayer.forward': ( 'models.autoformer.html#encoderlayer.forward',
                                                                                                             'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.LayerNorm': ( 'models.autoformer.html#layernorm',
                                                                                                  'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.LayerNorm.__init__': ( 'models.autoformer.html#layernorm.__init__',
                                                                                                           'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.LayerNorm.forward': ( 'models.autoformer.html#layernorm.forward',
                                                                                                          'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.MovingAvg': ( 'models.autoformer.html#movingavg',
                                                                                                  'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.MovingAvg.__init__': ( 'models.autoformer.html#movingavg.__init__',
                                                                                                           'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.MovingAvg.forward': ( 'models.autoformer.html#movingavg.forward',
                                                                                                          'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.SeriesDecomp': ( 'models.autoformer.html#seriesdecomp',
                                                                                                     'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.SeriesDecomp.__init__': ( 'models.autoformer.html#seriesdecomp.__init__',
                                                                                                              'neuralforecast/models/autoformer.py'),
                                                  'neuralforecast.models.autoformer.SeriesDecomp.forward': ( 'models.autoformer.html#seriesdecomp.forward',
                                                                                                             'neuralforecast/models/autoformer.py')},
            'neuralforecast.models.deepar': { 'neuralforecast.models.deepar.Decoder': ( 'models.deepar.html#decoder',
                                                                                        'neuralforecast/models/deepar.py'),
                                              'neuralforecast.models.deepar.Decoder.__init__': ( 'models.deepar.html#decoder.__init__',
                                                                                                 'neuralforecast/models/deepar.py'),
                                              'neuralforecast.models.deepar.Decoder.forward': ( 'models.deepar.html#decoder.forward',
                                                                                                'neuralforecast/models/deepar.py'),
                                              'neuralforecast.models.deepar.DeepAR': ( 'models.deepar.html#deepar',
                                                                                       'neuralforecast/models/deepar.py'),
                                              'neuralforecast.models.deepar.DeepAR.__init__': ( 'models.deepar.html#deepar.__init__',
                                                                                                'neuralforecast/models/deepar.py'),
                                              'neuralforecast.models.deepar.DeepAR.forward': ( 'models.deepar.html#deepar.forward',
                                                                                               'neuralforecast/models/deepar.py'),
                                              'neuralforecast.models.deepar.DeepAR.predict_step': ( 'models.deepar.html#deepar.predict_step',
                                                                                                    'neuralforecast/models/deepar.py'),
                                              'neuralforecast.models.deepar.DeepAR.train_forward': ( 'models.deepar.html#deepar.train_forward',
                                                                                                     'neuralforecast/models/deepar.py'),
                                              'neuralforecast.models.deepar.DeepAR.training_step': ( 'models.deepar.html#deepar.training_step',
                                                                                                     'neuralforecast/models/deepar.py'),
                                              'neuralforecast.models.deepar.DeepAR.validation_step': ( 'models.deepar.html#deepar.validation_step',
                                                                                                       'neuralforecast/models/deepar.py')},
            'neuralforecast.models.dilated_rnn': { 'neuralforecast.models.dilated_rnn.AttentiveLSTMLayer': ( 'models.dilated_rnn.html#attentivelstmlayer',
                                                                                                             'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.AttentiveLSTMLayer.__init__': ( 'models.dilated_rnn.html#attentivelstmlayer.__init__',
                                                                                                                      'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.AttentiveLSTMLayer.forward': ( 'models.dilated_rnn.html#attentivelstmlayer.forward',
                                                                                                                     'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN': ( 'models.dilated_rnn.html#drnn',
                                                                                               'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN.__init__': ( 'models.dilated_rnn.html#drnn.__init__',
                                                                                                        'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN._apply_cell': ( 'models.dilated_rnn.html#drnn._apply_cell',
                                                                                                           'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN._pad_inputs': ( 'models.dilated_rnn.html#drnn._pad_inputs',
                                                                                                           'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN._prepare_inputs': ( 'models.dilated_rnn.html#drnn._prepare_inputs',
                                                                                                               'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN._split_outputs': ( 'models.dilated_rnn.html#drnn._split_outputs',
                                                                                                              'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN._unpad_outputs': ( 'models.dilated_rnn.html#drnn._unpad_outputs',
                                                                                                              'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN.drnn_layer': ( 'models.dilated_rnn.html#drnn.drnn_layer',
                                                                                                          'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DRNN.forward': ( 'models.dilated_rnn.html#drnn.forward',
                                                                                                       'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DilatedRNN': ( 'models.dilated_rnn.html#dilatedrnn',
                                                                                                     'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DilatedRNN.__init__': ( 'models.dilated_rnn.html#dilatedrnn.__init__',
                                                                                                              'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.DilatedRNN.forward': ( 'models.dilated_rnn.html#dilatedrnn.forward',
                                                                                                             'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.LSTMCell': ( 'models.dilated_rnn.html#lstmcell',
                                                                                                   'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.LSTMCell.__init__': ( 'models.dilated_rnn.html#lstmcell.__init__',
                                                                                                            'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.LSTMCell.forward': ( 'models.dilated_rnn.html#lstmcell.forward',
                                                                                                           'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMCell': ( 'models.dilated_rnn.html#reslstmcell',
                                                                                                      'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMCell.__init__': ( 'models.dilated_rnn.html#reslstmcell.__init__',
                                                                                                               'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMCell.forward': ( 'models.dilated_rnn.html#reslstmcell.forward',
                                                                                                              'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMLayer': ( 'models.dilated_rnn.html#reslstmlayer',
                                                                                                       'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMLayer.__init__': ( 'models.dilated_rnn.html#reslstmlayer.__init__',
                                                                                                                'neuralforecast/models/dilated_rnn.py'),
                                                   'neuralforecast.models.dilated_rnn.ResLSTMLayer.forward': ( 'models.dilated_rnn.html#reslstmlayer.forward',
                                                                                                               'neuralforecast/models/dilated_rnn.py')},
            'neuralforecast.models.fedformer': { 'neuralforecast.models.fedformer.AutoCorrelationLayer': ( 'models.fedformer.html#autocorrelationlayer',
                                                                                                           'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.AutoCorrelationLayer.__init__': ( 'models.fedformer.html#autocorrelationlayer.__init__',
                                                                                                                    'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.AutoCorrelationLayer.forward': ( 'models.fedformer.html#autocorrelationlayer.forward',
                                                                                                                   'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.Decoder': ( 'models.fedformer.html#decoder',
                                                                                              'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.Decoder.__init__': ( 'models.fedformer.html#decoder.__init__',
                                                                                                       'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.Decoder.forward': ( 'models.fedformer.html#decoder.forward',
                                                                                                      'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.DecoderLayer': ( 'models.fedformer.html#decoderlayer',
                                                                                                   'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.DecoderLayer.__init__': ( 'models.fedformer.html#decoderlayer.__init__',
                                                                                                            'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.DecoderLayer.forward': ( 'models.fedformer.html#decoderlayer.forward',
                                                                                                           'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.Encoder': ( 'models.fedformer.html#encoder',
                                                                                              'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.Encoder.__init__': ( 'models.fedformer.html#encoder.__init__',
                                                                                                       'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.Encoder.forward': ( 'models.fedformer.html#encoder.forward',
                                                                                                      'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.EncoderLayer': ( 'models.fedformer.html#encoderlayer',
                                                                                                   'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.EncoderLayer.__init__': ( 'models.fedformer.html#encoderlayer.__init__',
                                                                                                            'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.EncoderLayer.forward': ( 'models.fedformer.html#encoderlayer.forward',
                                                                                                           'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FEDformer': ( 'models.fedformer.html#fedformer',
                                                                                                'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FEDformer.__init__': ( 'models.fedformer.html#fedformer.__init__',
                                                                                                         'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FEDformer.forward': ( 'models.fedformer.html#fedformer.forward',
                                                                                                        'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FourierBlock': ( 'models.fedformer.html#fourierblock',
                                                                                                   'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FourierBlock.__init__': ( 'models.fedformer.html#fourierblock.__init__',
                                                                                                            'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FourierBlock.compl_mul1d': ( 'models.fedformer.html#fourierblock.compl_mul1d',
                                                                                                               'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FourierBlock.forward': ( 'models.fedformer.html#fourierblock.forward',
                                                                                                           'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FourierCrossAttention': ( 'models.fedformer.html#fouriercrossattention',
                                                                                                            'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FourierCrossAttention.__init__': ( 'models.fedformer.html#fouriercrossattention.__init__',
                                                                                                                     'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FourierCrossAttention.compl_mul1d': ( 'models.fedformer.html#fouriercrossattention.compl_mul1d',
                                                                                                                        'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.FourierCrossAttention.forward': ( 'models.fedformer.html#fouriercrossattention.forward',
                                                                                                                    'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.LayerNorm': ( 'models.fedformer.html#layernorm',
                                                                                                'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.LayerNorm.__init__': ( 'models.fedformer.html#layernorm.__init__',
                                                                                                         'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.LayerNorm.forward': ( 'models.fedformer.html#layernorm.forward',
                                                                                                        'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.MovingAvg': ( 'models.fedformer.html#movingavg',
                                                                                                'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.MovingAvg.__init__': ( 'models.fedformer.html#movingavg.__init__',
                                                                                                         'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.MovingAvg.forward': ( 'models.fedformer.html#movingavg.forward',
                                                                                                        'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.SeriesDecomp': ( 'models.fedformer.html#seriesdecomp',
                                                                                                   'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.SeriesDecomp.__init__': ( 'models.fedformer.html#seriesdecomp.__init__',
                                                                                                            'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.SeriesDecomp.forward': ( 'models.fedformer.html#seriesdecomp.forward',
                                                                                                           'neuralforecast/models/fedformer.py'),
                                                 'neuralforecast.models.fedformer.get_frequency_modes': ( 'models.fedformer.html#get_frequency_modes',
                                                                                                          'neuralforecast/models/fedformer.py')},
            'neuralforecast.models.gru': { 'neuralforecast.models.gru.GRU': ('models.gru.html#gru', 'neuralforecast/models/gru.py'),
                                           'neuralforecast.models.gru.GRU.__init__': ( 'models.gru.html#gru.__init__',
                                                                                       'neuralforecast/models/gru.py'),
                                           'neuralforecast.models.gru.GRU.forward': ( 'models.gru.html#gru.forward',
                                                                                      'neuralforecast/models/gru.py')},
            'neuralforecast.models.hint': { 'neuralforecast.models.hint.HINT': ('models.hint.html#hint', 'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.HINT.__init__': ( 'models.hint.html#hint.__init__',
                                                                                          'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.HINT.__repr__': ( 'models.hint.html#hint.__repr__',
                                                                                          'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.HINT.fit': ( 'models.hint.html#hint.fit',
                                                                                     'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.HINT.get_test_size': ( 'models.hint.html#hint.get_test_size',
                                                                                               'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.HINT.predict': ( 'models.hint.html#hint.predict',
                                                                                         'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.HINT.save': ( 'models.hint.html#hint.save',
                                                                                      'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.HINT.set_test_size': ( 'models.hint.html#hint.set_test_size',
                                                                                               'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.get_bottomup_P': ( 'models.hint.html#get_bottomup_p',
                                                                                           'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.get_identity_P': ( 'models.hint.html#get_identity_p',
                                                                                           'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.get_mintrace_ols_P': ( 'models.hint.html#get_mintrace_ols_p',
                                                                                               'neuralforecast/models/hint.py'),
                                            'neuralforecast.models.hint.get_mintrace_wls_P': ( 'models.hint.html#get_mintrace_wls_p',
                                                                                               'neuralforecast/models/hint.py')},
            'neuralforecast.models.informer': { 'neuralforecast.models.informer.ConvLayer': ( 'models.informer.html#convlayer',
                                                                                              'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ConvLayer.__init__': ( 'models.informer.html#convlayer.__init__',
                                                                                                       'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ConvLayer.forward': ( 'models.informer.html#convlayer.forward',
                                                                                                      'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.Informer': ( 'models.informer.html#informer',
                                                                                             'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.Informer.__init__': ( 'models.informer.html#informer.__init__',
                                                                                                      'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.Informer.forward': ( 'models.informer.html#informer.forward',
                                                                                                     'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ProbAttention': ( 'models.informer.html#probattention',
                                                                                                  'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ProbAttention.__init__': ( 'models.informer.html#probattention.__init__',
                                                                                                           'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ProbAttention._get_initial_context': ( 'models.informer.html#probattention._get_initial_context',
                                                                                                                       'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ProbAttention._prob_QK': ( 'models.informer.html#probattention._prob_qk',
                                                                                                           'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ProbAttention._update_context': ( 'models.informer.html#probattention._update_context',
                                                                                                                  'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ProbAttention.forward': ( 'models.informer.html#probattention.forward',
                                                                                                          'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ProbMask': ( 'models.informer.html#probmask',
                                                                                             'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ProbMask.__init__': ( 'models.informer.html#probmask.__init__',
                                                                                                      'neuralforecast/models/informer.py'),
                                                'neuralforecast.models.informer.ProbMask.mask': ( 'models.informer.html#probmask.mask',
                                                                                                  'neuralforecast/models/informer.py')},
            'neuralforecast.models.lstm': { 'neuralforecast.models.lstm.LSTM': ('models.lstm.html#lstm', 'neuralforecast/models/lstm.py'),
                                            'neuralforecast.models.lstm.LSTM.__init__': ( 'models.lstm.html#lstm.__init__',
                                                                                          'neuralforecast/models/lstm.py'),
                                            'neuralforecast.models.lstm.LSTM.forward': ( 'models.lstm.html#lstm.forward',
                                                                                         'neuralforecast/models/lstm.py')},
            'neuralforecast.models.mlp': { 'neuralforecast.models.mlp.MLP': ('models.mlp.html#mlp', 'neuralforecast/models/mlp.py'),
                                           'neuralforecast.models.mlp.MLP.__init__': ( 'models.mlp.html#mlp.__init__',
                                                                                       'neuralforecast/models/mlp.py'),
                                           'neuralforecast.models.mlp.MLP.forward': ( 'models.mlp.html#mlp.forward',
                                                                                      'neuralforecast/models/mlp.py')},
            'neuralforecast.models.nbeats': { 'neuralforecast.models.nbeats.IdentityBasis': ( 'models.nbeats.html#identitybasis',
                                                                                              'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.IdentityBasis.__init__': ( 'models.nbeats.html#identitybasis.__init__',
                                                                                                       'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.IdentityBasis.forward': ( 'models.nbeats.html#identitybasis.forward',
                                                                                                      'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATS': ( 'models.nbeats.html#nbeats',
                                                                                       'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATS.__init__': ( 'models.nbeats.html#nbeats.__init__',
                                                                                                'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATS.create_stack': ( 'models.nbeats.html#nbeats.create_stack',
                                                                                                    'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATS.forward': ( 'models.nbeats.html#nbeats.forward',
                                                                                               'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATSBlock': ( 'models.nbeats.html#nbeatsblock',
                                                                                            'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATSBlock.__init__': ( 'models.nbeats.html#nbeatsblock.__init__',
                                                                                                     'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.NBEATSBlock.forward': ( 'models.nbeats.html#nbeatsblock.forward',
                                                                                                    'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.SeasonalityBasis': ( 'models.nbeats.html#seasonalitybasis',
                                                                                                 'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.SeasonalityBasis.__init__': ( 'models.nbeats.html#seasonalitybasis.__init__',
                                                                                                          'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.SeasonalityBasis.forward': ( 'models.nbeats.html#seasonalitybasis.forward',
                                                                                                         'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.TrendBasis': ( 'models.nbeats.html#trendbasis',
                                                                                           'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.TrendBasis.__init__': ( 'models.nbeats.html#trendbasis.__init__',
                                                                                                    'neuralforecast/models/nbeats.py'),
                                              'neuralforecast.models.nbeats.TrendBasis.forward': ( 'models.nbeats.html#trendbasis.forward',
                                                                                                   'neuralforecast/models/nbeats.py')},
            'neuralforecast.models.nbeatsx': { 'neuralforecast.models.nbeatsx.IdentityBasis': ( 'models.nbeatsx.html#identitybasis',
                                                                                                'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.IdentityBasis.__init__': ( 'models.nbeatsx.html#identitybasis.__init__',
                                                                                                         'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.IdentityBasis.forward': ( 'models.nbeatsx.html#identitybasis.forward',
                                                                                                        'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSBlock': ( 'models.nbeatsx.html#nbeatsblock',
                                                                                              'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSBlock.__init__': ( 'models.nbeatsx.html#nbeatsblock.__init__',
                                                                                                       'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSBlock.forward': ( 'models.nbeatsx.html#nbeatsblock.forward',
                                                                                                      'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSx': ( 'models.nbeatsx.html#nbeatsx',
                                                                                          'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSx.__init__': ( 'models.nbeatsx.html#nbeatsx.__init__',
                                                                                                   'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSx.create_stack': ( 'models.nbeatsx.html#nbeatsx.create_stack',
                                                                                                       'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.NBEATSx.forward': ( 'models.nbeatsx.html#nbeatsx.forward',
                                                                                                  'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.SeasonalityBasis': ( 'models.nbeatsx.html#seasonalitybasis',
                                                                                                   'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.SeasonalityBasis.__init__': ( 'models.nbeatsx.html#seasonalitybasis.__init__',
                                                                                                            'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.SeasonalityBasis.forward': ( 'models.nbeatsx.html#seasonalitybasis.forward',
                                                                                                           'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.TrendBasis': ( 'models.nbeatsx.html#trendbasis',
                                                                                             'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.TrendBasis.__init__': ( 'models.nbeatsx.html#trendbasis.__init__',
                                                                                                      'neuralforecast/models/nbeatsx.py'),
                                               'neuralforecast.models.nbeatsx.TrendBasis.forward': ( 'models.nbeatsx.html#trendbasis.forward',
                                                                                                     'neuralforecast/models/nbeatsx.py')},
            'neuralforecast.models.nhits': { 'neuralforecast.models.nhits.NHITS': ( 'models.nhits.html#nhits',
                                                                                    'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITS.__init__': ( 'models.nhits.html#nhits.__init__',
                                                                                             'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITS.create_stack': ( 'models.nhits.html#nhits.create_stack',
                                                                                                 'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITS.forward': ( 'models.nhits.html#nhits.forward',
                                                                                            'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITSBlock': ( 'models.nhits.html#nhitsblock',
                                                                                         'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITSBlock.__init__': ( 'models.nhits.html#nhitsblock.__init__',
                                                                                                  'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits.NHITSBlock.forward': ( 'models.nhits.html#nhitsblock.forward',
                                                                                                 'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits._IdentityBasis': ( 'models.nhits.html#_identitybasis',
                                                                                             'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits._IdentityBasis.__init__': ( 'models.nhits.html#_identitybasis.__init__',
                                                                                                      'neuralforecast/models/nhits.py'),
                                             'neuralforecast.models.nhits._IdentityBasis.forward': ( 'models.nhits.html#_identitybasis.forward',
                                                                                                     'neuralforecast/models/nhits.py')},
            'neuralforecast.models.patchtst': { 'neuralforecast.models.patchtst.Coord1dPosEncoding': ( 'models.patchtst.html#coord1dposencoding',
                                                                                                       'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.Coord2dPosEncoding': ( 'models.patchtst.html#coord2dposencoding',
                                                                                                       'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.Flatten_Head': ( 'models.patchtst.html#flatten_head',
                                                                                                 'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.Flatten_Head.__init__': ( 'models.patchtst.html#flatten_head.__init__',
                                                                                                          'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.Flatten_Head.forward': ( 'models.patchtst.html#flatten_head.forward',
                                                                                                         'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.PatchTST': ( 'models.patchtst.html#patchtst',
                                                                                             'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.PatchTST.__init__': ( 'models.patchtst.html#patchtst.__init__',
                                                                                                      'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.PatchTST.forward': ( 'models.patchtst.html#patchtst.forward',
                                                                                                     'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.PatchTST_backbone': ( 'models.patchtst.html#patchtst_backbone',
                                                                                                      'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.PatchTST_backbone.__init__': ( 'models.patchtst.html#patchtst_backbone.__init__',
                                                                                                               'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.PatchTST_backbone.create_pretrain_head': ( 'models.patchtst.html#patchtst_backbone.create_pretrain_head',
                                                                                                                           'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.PatchTST_backbone.forward': ( 'models.patchtst.html#patchtst_backbone.forward',
                                                                                                              'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.PositionalEncoding': ( 'models.patchtst.html#positionalencoding',
                                                                                                       'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.RevIN': ( 'models.patchtst.html#revin',
                                                                                          'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.RevIN.__init__': ( 'models.patchtst.html#revin.__init__',
                                                                                                   'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.RevIN._denormalize': ( 'models.patchtst.html#revin._denormalize',
                                                                                                       'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.RevIN._get_statistics': ( 'models.patchtst.html#revin._get_statistics',
                                                                                                          'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.RevIN._init_params': ( 'models.patchtst.html#revin._init_params',
                                                                                                       'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.RevIN._normalize': ( 'models.patchtst.html#revin._normalize',
                                                                                                     'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.RevIN.forward': ( 'models.patchtst.html#revin.forward',
                                                                                                  'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.TSTEncoder': ( 'models.patchtst.html#tstencoder',
                                                                                               'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.TSTEncoder.__init__': ( 'models.patchtst.html#tstencoder.__init__',
                                                                                                        'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.TSTEncoder.forward': ( 'models.patchtst.html#tstencoder.forward',
                                                                                                       'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.TSTEncoderLayer': ( 'models.patchtst.html#tstencoderlayer',
                                                                                                    'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.TSTEncoderLayer.__init__': ( 'models.patchtst.html#tstencoderlayer.__init__',
                                                                                                             'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.TSTEncoderLayer.forward': ( 'models.patchtst.html#tstencoderlayer.forward',
                                                                                                            'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.TSTiEncoder': ( 'models.patchtst.html#tstiencoder',
                                                                                                'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.TSTiEncoder.__init__': ( 'models.patchtst.html#tstiencoder.__init__',
                                                                                                         'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.TSTiEncoder.forward': ( 'models.patchtst.html#tstiencoder.forward',
                                                                                                        'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.Transpose': ( 'models.patchtst.html#transpose',
                                                                                              'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.Transpose.__init__': ( 'models.patchtst.html#transpose.__init__',
                                                                                                       'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.Transpose.forward': ( 'models.patchtst.html#transpose.forward',
                                                                                                      'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst._MultiheadAttention': ( 'models.patchtst.html#_multiheadattention',
                                                                                                        'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst._MultiheadAttention.__init__': ( 'models.patchtst.html#_multiheadattention.__init__',
                                                                                                                 'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst._MultiheadAttention.forward': ( 'models.patchtst.html#_multiheadattention.forward',
                                                                                                                'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst._ScaledDotProductAttention': ( 'models.patchtst.html#_scaleddotproductattention',
                                                                                                               'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst._ScaledDotProductAttention.__init__': ( 'models.patchtst.html#_scaleddotproductattention.__init__',
                                                                                                                        'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst._ScaledDotProductAttention.forward': ( 'models.patchtst.html#_scaleddotproductattention.forward',
                                                                                                                       'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.get_activation_fn': ( 'models.patchtst.html#get_activation_fn',
                                                                                                      'neuralforecast/models/patchtst.py'),
                                                'neuralforecast.models.patchtst.positional_encoding': ( 'models.patchtst.html#positional_encoding',
                                                                                                        'neuralforecast/models/patchtst.py')},
            'neuralforecast.models.rnn': { 'neuralforecast.models.rnn.RNN': ('models.rnn.html#rnn', 'neuralforecast/models/rnn.py'),
                                           'neuralforecast.models.rnn.RNN.__init__': ( 'models.rnn.html#rnn.__init__',
                                                                                       'neuralforecast/models/rnn.py'),
                                           'neuralforecast.models.rnn.RNN.forward': ( 'models.rnn.html#rnn.forward',
                                                                                      'neuralforecast/models/rnn.py')},
            'neuralforecast.models.stemgnn': { 'neuralforecast.models.stemgnn.GLU': ( 'models.stemgnn.html#glu',
                                                                                      'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.GLU.__init__': ( 'models.stemgnn.html#glu.__init__',
                                                                                               'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.GLU.forward': ( 'models.stemgnn.html#glu.forward',
                                                                                              'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StemGNN': ( 'models.stemgnn.html#stemgnn',
                                                                                          'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StemGNN.__init__': ( 'models.stemgnn.html#stemgnn.__init__',
                                                                                                   'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StemGNN.cheb_polynomial': ( 'models.stemgnn.html#stemgnn.cheb_polynomial',
                                                                                                          'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StemGNN.forward': ( 'models.stemgnn.html#stemgnn.forward',
                                                                                                  'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StemGNN.get_laplacian': ( 'models.stemgnn.html#stemgnn.get_laplacian',
                                                                                                        'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StemGNN.graph_fft': ( 'models.stemgnn.html#stemgnn.graph_fft',
                                                                                                    'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StemGNN.latent_correlation_layer': ( 'models.stemgnn.html#stemgnn.latent_correlation_layer',
                                                                                                                   'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StemGNN.self_graph_attention': ( 'models.stemgnn.html#stemgnn.self_graph_attention',
                                                                                                               'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StockBlockLayer': ( 'models.stemgnn.html#stockblocklayer',
                                                                                                  'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StockBlockLayer.__init__': ( 'models.stemgnn.html#stockblocklayer.__init__',
                                                                                                           'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StockBlockLayer.forward': ( 'models.stemgnn.html#stockblocklayer.forward',
                                                                                                          'neuralforecast/models/stemgnn.py'),
                                               'neuralforecast.models.stemgnn.StockBlockLayer.spe_seq_cell': ( 'models.stemgnn.html#stockblocklayer.spe_seq_cell',
                                                                                                               'neuralforecast/models/stemgnn.py')},
            'neuralforecast.models.tcn': { 'neuralforecast.models.tcn.TCN': ('models.tcn.html#tcn', 'neuralforecast/models/tcn.py'),
                                           'neuralforecast.models.tcn.TCN.__init__': ( 'models.tcn.html#tcn.__init__',
                                                                                       'neuralforecast/models/tcn.py'),
                                           'neuralforecast.models.tcn.TCN.forward': ( 'models.tcn.html#tcn.forward',
                                                                                      'neuralforecast/models/tcn.py')},
            'neuralforecast.models.tft': { 'neuralforecast.models.tft.GLU': ('models.tft.html#glu', 'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.GLU.__init__': ( 'models.tft.html#glu.__init__',
                                                                                       'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.GLU.forward': ( 'models.tft.html#glu.forward',
                                                                                      'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.GRN': ('models.tft.html#grn', 'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.GRN.__init__': ( 'models.tft.html#grn.__init__',
                                                                                       'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.GRN.forward': ( 'models.tft.html#grn.forward',
                                                                                      'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.InterpretableMultiHeadAttention': ( 'models.tft.html#interpretablemultiheadattention',
                                                                                                          'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.InterpretableMultiHeadAttention.__init__': ( 'models.tft.html#interpretablemultiheadattention.__init__',
                                                                                                                   'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.InterpretableMultiHeadAttention.forward': ( 'models.tft.html#interpretablemultiheadattention.forward',
                                                                                                                  'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.MaybeLayerNorm': ( 'models.tft.html#maybelayernorm',
                                                                                         'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.MaybeLayerNorm.__init__': ( 'models.tft.html#maybelayernorm.__init__',
                                                                                                  'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.MaybeLayerNorm.forward': ( 'models.tft.html#maybelayernorm.forward',
                                                                                                 'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.StaticCovariateEncoder': ( 'models.tft.html#staticcovariateencoder',
                                                                                                 'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.StaticCovariateEncoder.__init__': ( 'models.tft.html#staticcovariateencoder.__init__',
                                                                                                          'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.StaticCovariateEncoder.forward': ( 'models.tft.html#staticcovariateencoder.forward',
                                                                                                         'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFT': ('models.tft.html#tft', 'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFT.__init__': ( 'models.tft.html#tft.__init__',
                                                                                       'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFT.forward': ( 'models.tft.html#tft.forward',
                                                                                      'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFTEmbedding': ( 'models.tft.html#tftembedding',
                                                                                       'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFTEmbedding.__init__': ( 'models.tft.html#tftembedding.__init__',
                                                                                                'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFTEmbedding._apply_embedding': ( 'models.tft.html#tftembedding._apply_embedding',
                                                                                                        'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TFTEmbedding.forward': ( 'models.tft.html#tftembedding.forward',
                                                                                               'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalCovariateEncoder': ( 'models.tft.html#temporalcovariateencoder',
                                                                                                   'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalCovariateEncoder.__init__': ( 'models.tft.html#temporalcovariateencoder.__init__',
                                                                                                            'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalCovariateEncoder.forward': ( 'models.tft.html#temporalcovariateencoder.forward',
                                                                                                           'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalFusionDecoder': ( 'models.tft.html#temporalfusiondecoder',
                                                                                                'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalFusionDecoder.__init__': ( 'models.tft.html#temporalfusiondecoder.__init__',
                                                                                                         'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.TemporalFusionDecoder.forward': ( 'models.tft.html#temporalfusiondecoder.forward',
                                                                                                        'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.VariableSelectionNetwork': ( 'models.tft.html#variableselectionnetwork',
                                                                                                   'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.VariableSelectionNetwork.__init__': ( 'models.tft.html#variableselectionnetwork.__init__',
                                                                                                            'neuralforecast/models/tft.py'),
                                           'neuralforecast.models.tft.VariableSelectionNetwork.forward': ( 'models.tft.html#variableselectionnetwork.forward',
                                                                                                           'neuralforecast/models/tft.py')},
            'neuralforecast.models.vanillatransformer': { 'neuralforecast.models.vanillatransformer.FullAttention': ( 'models.vanillatransformer.html#fullattention',
                                                                                                                      'neuralforecast/models/vanillatransformer.py'),
                                                          'neuralforecast.models.vanillatransformer.FullAttention.__init__': ( 'models.vanillatransformer.html#fullattention.__init__',
                                                                                                                               'neuralforecast/models/vanillatransformer.py'),
                                                          'neuralforecast.models.vanillatransformer.FullAttention.forward': ( 'models.vanillatransformer.html#fullattention.forward',
                                                                                                                              'neuralforecast/models/vanillatransformer.py'),
                                                          'neuralforecast.models.vanillatransformer.TriangularCausalMask': ( 'models.vanillatransformer.html#triangularcausalmask',
                                                                                                                             'neuralforecast/models/vanillatransformer.py'),
                                                          'neuralforecast.models.vanillatransformer.TriangularCausalMask.__init__': ( 'models.vanillatransformer.html#triangularcausalmask.__init__',
                                                                                                                                      'neuralforecast/models/vanillatransformer.py'),
                                                          'neuralforecast.models.vanillatransformer.TriangularCausalMask.mask': ( 'models.vanillatransformer.html#triangularcausalmask.mask',
                                                                                                                                  'neuralforecast/models/vanillatransformer.py'),
                                                          'neuralforecast.models.vanillatransformer.VanillaTransformer': ( 'models.vanillatransformer.html#vanillatransformer',
                                                                                                                           'neuralforecast/models/vanillatransformer.py'),
                                                          'neuralforecast.models.vanillatransformer.VanillaTransformer.__init__': ( 'models.vanillatransformer.html#vanillatransformer.__init__',
                                                                                                                                    'neuralforecast/models/vanillatransformer.py'),
                                                          'neuralforecast.models.vanillatransformer.VanillaTransformer.forward': ( 'models.vanillatransformer.html#vanillatransformer.forward',
                                                                                                                                   'neuralforecast/models/vanillatransformer.py')},
            'neuralforecast.tsdataset': { 'neuralforecast.tsdataset.TimeSeriesDataModule': ( 'tsdataset.html#timeseriesdatamodule',
                                                                                             'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataModule.__init__': ( 'tsdataset.html#timeseriesdatamodule.__init__',
                                                                                                      'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataModule.predict_dataloader': ( 'tsdataset.html#timeseriesdatamodule.predict_dataloader',
                                                                                                                'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataModule.train_dataloader': ( 'tsdataset.html#timeseriesdatamodule.train_dataloader',
                                                                                                              'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataModule.val_dataloader': ( 'tsdataset.html#timeseriesdatamodule.val_dataloader',
                                                                                                            'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset': ( 'tsdataset.html#timeseriesdataset',
                                                                                          'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.__eq__': ( 'tsdataset.html#timeseriesdataset.__eq__',
                                                                                                 'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.__getitem__': ( 'tsdataset.html#timeseriesdataset.__getitem__',
                                                                                                      'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.__init__': ( 'tsdataset.html#timeseriesdataset.__init__',
                                                                                                   'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.__len__': ( 'tsdataset.html#timeseriesdataset.__len__',
                                                                                                  'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.__repr__': ( 'tsdataset.html#timeseriesdataset.__repr__',
                                                                                                   'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.from_df': ( 'tsdataset.html#timeseriesdataset.from_df',
                                                                                                  'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.trim_dataset': ( 'tsdataset.html#timeseriesdataset.trim_dataset',
                                                                                                       'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesDataset.update_dataset': ( 'tsdataset.html#timeseriesdataset.update_dataset',
                                                                                                         'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesLoader': ( 'tsdataset.html#timeseriesloader',
                                                                                         'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesLoader.__init__': ( 'tsdataset.html#timeseriesloader.__init__',
                                                                                                  'neuralforecast/tsdataset.py'),
                                          'neuralforecast.tsdataset.TimeSeriesLoader._collate_fn': ( 'tsdataset.html#timeseriesloader._collate_fn',
                                                                                                     'neuralforecast/tsdataset.py')},
            'neuralforecast.utils': { 'neuralforecast.utils.DayOfMonth': ('utils.html#dayofmonth', 'neuralforecast/utils.py'),
                                      'neuralforecast.utils.DayOfMonth.__call__': ( 'utils.html#dayofmonth.__call__',
                                                                                    'neuralforecast/utils.py'),
                                      'neuralforecast.utils.DayOfWeek': ('utils.html#dayofweek', 'neuralforecast/utils.py'),
                                      'neuralforecast.utils.DayOfWeek.__call__': ( 'utils.html#dayofweek.__call__',
                                                                                   'neuralforecast/utils.py'),
                                      'neuralforecast.utils.DayOfYear': ('utils.html#dayofyear', 'neuralforecast/utils.py'),
                                      'neuralforecast.utils.DayOfYear.__call__': ( 'utils.html#dayofyear.__call__',
                                                                                   'neuralforecast/utils.py'),
                                      'neuralforecast.utils.HourOfDay': ('utils.html#hourofday', 'neuralforecast/utils.py'),
                                      'neuralforecast.utils.HourOfDay.__call__': ( 'utils.html#hourofday.__call__',
                                                                                   'neuralforecast/utils.py'),
                                      'neuralforecast.utils.MinuteOfHour': ('utils.html#minuteofhour', 'neuralforecast/utils.py'),
                                      'neuralforecast.utils.MinuteOfHour.__call__': ( 'utils.html#minuteofhour.__call__',
                                                                                      'neuralforecast/utils.py'),
                                      'neuralforecast.utils.MonthOfYear': ('utils.html#monthofyear', 'neuralforecast/utils.py'),
                                      'neuralforecast.utils.MonthOfYear.__call__': ( 'utils.html#monthofyear.__call__',
                                                                                     'neuralforecast/utils.py'),
                                      'neuralforecast.utils.SecondOfMinute': ('utils.html#secondofminute', 'neuralforecast/utils.py'),
                                      'neuralforecast.utils.SecondOfMinute.__call__': ( 'utils.html#secondofminute.__call__',
                                                                                        'neuralforecast/utils.py'),
                                      'neuralforecast.utils.TimeFeature': ('utils.html#timefeature', 'neuralforecast/utils.py'),
                                      'neuralforecast.utils.TimeFeature.__call__': ( 'utils.html#timefeature.__call__',
                                                                                     'neuralforecast/utils.py'),
                                      'neuralforecast.utils.TimeFeature.__init__': ( 'utils.html#timefeature.__init__',
                                                                                     'neuralforecast/utils.py'),
                                      'neuralforecast.utils.TimeFeature.__repr__': ( 'utils.html#timefeature.__repr__',
                                                                                     'neuralforecast/utils.py'),
                                      'neuralforecast.utils.WeekOfYear': ('utils.html#weekofyear', 'neuralforecast/utils.py'),
                                      'neuralforecast.utils.WeekOfYear.__call__': ( 'utils.html#weekofyear.__call__',
                                                                                    'neuralforecast/utils.py'),
                                      'neuralforecast.utils.augment_calendar_df': ( 'utils.html#augment_calendar_df',
                                                                                    'neuralforecast/utils.py'),
                                      'neuralforecast.utils.generate_series': ('utils.html#generate_series', 'neuralforecast/utils.py'),
                                      'neuralforecast.utils.time_features_from_frequency_str': ( 'utils.html#time_features_from_frequency_str',
                                                                                                 'neuralforecast/utils.py')}}}
