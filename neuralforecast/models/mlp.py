# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/models.mlp.ipynb.

# %% auto 0
__all__ = ['GLU_FFN', 'PatchMixLayer', 'MLP']

# %% ../../nbs/models.mlp.ipynb 5
from typing import Optional, Callable

import torch.nn as nn
import torch.nn.functional as F
from torch import Tensor

from neuralforecast.losses.pytorch import MAE
from neuralforecast.common._base_windows import BaseWindows
from neuralforecast.common._modules import RevIN

# %% ../../nbs/models.mlp.ipynb 6
class GLU_FFN(nn.Module):
    def __init__(
        self,
        d_hidden: int,
        d_ff: int,
        dropout: float = 0.1,
        activation: Callable = F.relu,
        bias: bool = True,
    ) -> None:
        super().__init__()

        # Implementation of Feedforward model
        self.linear1 = nn.Linear(d_hidden, d_ff, bias=bias)
        self.linear1g = nn.Linear(d_hidden, d_ff, bias=bias)
        self.dropout1 = nn.Dropout(dropout)
        self.dropout2 = nn.Dropout(dropout)
        self.linear2 = nn.Linear(d_ff, d_hidden, bias=bias)
        self.activation = activation

    def forward(self, x: Tensor) -> Tensor:
        x1 = self.dropout1(self.linear1(x))
        x2 = self.linear1g(x)
        hidden = self.activation(x1) * x2
        return self.dropout2(self.linear2(hidden))


class PatchMixLayer(nn.Module):
    def __init__(
        self,
        d_hidden: int,
        n_patches: int,
        d_ff: int,
        dropout: float = 0.1,
        activation: Callable = F.relu,
        bias: bool = True,
    ) -> None:
        super().__init__()

        # Patch FFN
        self.patch_ffn = GLU_FFN(d_hidden, d_ff, dropout, activation, bias)
        self.norm1 = nn.BatchNorm1d(n_patches)

        # Feature ffn
        self.feature_ffn = GLU_FFN(n_patches, d_ff, dropout, activation, bias)
        self.norm2 = nn.BatchNorm1d(d_hidden)

    def forward(self, x: Tensor) -> Tensor:  # [B, n_patches, hidden_size]

        x = self.norm1(x + self.patch_ffn(x))

        x = x.permute(0, 2, 1)
        x = self.norm2(x + self.feature_ffn(x))
        x = x.permute(0, 2, 1)

        return x

# %% ../../nbs/models.mlp.ipynb 7
class MLP(BaseWindows):
    """MLP

    Modified MLP

    **Parameters:**<br>
    `h`: int, forecast horizon.<br>
    `input_size`: int, considered autorregresive inputs (lags), y=[1,2,3,4] input_size=2 -> lags=[1,2].<br>
    `hidden_size`: int=16, units for the hidden state size.<br>
    `dropout`: float=0.1, dropout rate used for the dropout layers throughout the architecture.<br>
    `futr_exog_list`: str list, future exogenous columns.<br>
    `hist_exog_list`: str list, historic exogenous columns.<br>
    `stat_exog_list`: str list, static exogenous columns.<br>
    `exclude_insample_y`: bool=False, the model skips the autoregressive features y[t-input_size:t] if True.<br>
    `loss`: PyTorch module, instantiated train loss class from [losses collection](https://nixtla.github.io/neuralforecast/losses.pytorch.html).<br>
    `valid_loss`: PyTorch module=`loss`, instantiated valid loss class from [losses collection](https://nixtla.github.io/neuralforecast/losses.pytorch.html).<br>
    `max_steps`: int=1000, maximum number of training steps.<br>
    `learning_rate`: float=1e-3, Learning rate between (0, 1).<br>
    `num_lr_decays`: int=-1, Number of learning rate decays, evenly distributed across max_steps.<br>
    `early_stop_patience_steps`: int=-1, Number of validation iterations before early stopping.<br>
    `val_check_steps`: int=100, Number of training steps between every validation loss check.<br>
    `batch_size`: int=32, number of different series in each batch.<br>
    `valid_batch_size`: int=None, number of different series in each validation and test batch, if None uses batch_size.<br>
    `windows_batch_size`: int=1024, number of windows to sample in each training batch, default uses all.<br>
    `inference_windows_batch_size`: int=-1, number of windows to sample in each inference batch, -1 uses all.<br>
    `start_padding_enabled`: bool=False, if True, the model will pad the time series with zeros at the beginning, by input size.<br>
    `step_size`: int=1, step size between each window of temporal data.<br>
    `scaler_type`: str='identity', type of scaler for temporal inputs normalization see [temporal scalers](https://nixtla.github.io/neuralforecast/common.scalers.html).<br>
    `random_seed`: int=1, random_seed for pytorch initializer and numpy generators.<br>
    `drop_last_loader`: bool=False, if True `TimeSeriesDataLoader` drops last non-full batch.<br>
    `alias`: str, optional,  Custom name of the model.<br>
    `optimizer`: Subclass of 'torch.optim.Optimizer', optional, user specified optimizer instead of the default choice (Adam).<br>
    `optimizer_kwargs`: dict, optional, list of parameters used by the user specified `optimizer`.<br>
    `lr_scheduler`: Subclass of 'torch.optim.lr_scheduler.LRScheduler', optional, user specified lr_scheduler instead of the default choice (StepLR).<br>
    `lr_scheduler_kwargs`: dict, optional, list of parameters used by the user specified `lr_scheduler`.<br>
    `dataloader_kwargs`: dict, optional, list of parameters passed into the PyTorch Lightning dataloader by the `TimeSeriesDataLoader`. <br>
    `**trainer_kwargs`: int,  keyword trainer arguments inherited from [PyTorch Lighning's trainer](https://pytorch-lightning.readthedocs.io/en/stable/api/pytorch_lightning.trainer.trainer.Trainer.html?highlight=trainer).<br>

    **References**<br>

    """

    # Class attributes
    SAMPLING_TYPE = "windows"
    EXOGENOUS_FUTR = False
    EXOGENOUS_HIST = False
    EXOGENOUS_STAT = False

    def __init__(
        self,
        h: int,
        input_size: int,
        encoder_layers: int = 3,
        hidden_size: int = 128,
        linear_hidden_size: int = 256,
        dropout: float = 0.2,
        patch_len: int = 16,
        stride: int = 8,
        revin: bool = True,
        linear_bias: bool = True,
        activation: Callable = F.gelu,
        futr_exog_list=None,
        hist_exog_list=None,
        stat_exog_list=None,
        exclude_insample_y=False,
        loss=MAE(),
        valid_loss=None,
        max_steps: int = 5000,
        learning_rate: float = 1e-4,
        num_lr_decays: int = -1,
        early_stop_patience_steps: int = -1,
        val_check_steps: int = 100,
        batch_size: int = 32,
        valid_batch_size: Optional[int] = None,
        windows_batch_size=1024,
        inference_windows_batch_size=1024,
        start_padding_enabled=False,
        step_size: int = 1,
        scaler_type: str = "identity",
        random_seed: int = 1,
        drop_last_loader: bool = False,
        optimizer=None,
        optimizer_kwargs=None,
        lr_scheduler=None,
        lr_scheduler_kwargs=None,
        dataloader_kwargs=None,
        **trainer_kwargs
    ):
        super(MLP, self).__init__(
            h=h,
            input_size=input_size,
            futr_exog_list=futr_exog_list,
            hist_exog_list=hist_exog_list,
            stat_exog_list=stat_exog_list,
            exclude_insample_y=exclude_insample_y,
            loss=loss,
            valid_loss=valid_loss,
            max_steps=max_steps,
            learning_rate=learning_rate,
            num_lr_decays=num_lr_decays,
            early_stop_patience_steps=early_stop_patience_steps,
            val_check_steps=val_check_steps,
            batch_size=batch_size,
            valid_batch_size=valid_batch_size,
            windows_batch_size=windows_batch_size,
            inference_windows_batch_size=inference_windows_batch_size,
            start_padding_enabled=start_padding_enabled,
            step_size=step_size,
            scaler_type=scaler_type,
            random_seed=random_seed,
            drop_last_loader=drop_last_loader,
            optimizer=optimizer,
            optimizer_kwargs=optimizer_kwargs,
            lr_scheduler=lr_scheduler,
            lr_scheduler_kwargs=lr_scheduler_kwargs,
            dataloader_kwargs=dataloader_kwargs,
            **trainer_kwargs
        )

        # ----------------------------------- Parse dimensions -----------------------------------#
        self.h = h
        self.input_size = input_size

        # RevIN
        self.revin = revin
        if self.revin:
            self.revin_layer = RevIN(1, affine=False, subtract_last=True)

        # Patches
        n_patches = int((input_size - patch_len) / stride + 1)
        self.padding_patch_layer = nn.ReplicationPad1d((0, stride))
        n_patches += 1
        self.patch_len = min(input_size + stride, patch_len)
        self.stride = stride

        # Linear projection
        self.linear_projection = nn.Linear(patch_len, hidden_size)
        self.dropout = nn.Dropout(dropout)

        # Patchmixer
        patchmix_layers = [
            PatchMixLayer(
                hidden_size,
                n_patches,
                linear_hidden_size,
                dropout,
                activation,
                linear_bias,
            )
            for _ in range(encoder_layers)
        ]
        self.patchmixer = nn.Sequential(*patchmix_layers)

        # Decoder
        self.linear_decoder = nn.Sequential(
            nn.Flatten(start_dim=-2),
            nn.Linear(n_patches * hidden_size, h * self.loss.outputsize_multiplier),
        )

    def forward(self, windows_batch):
        # Parse windows_batch
        x = windows_batch["insample_y"]  #   [B, L]
        batch_size = x.size(0)

        # RevIN
        if self.revin:
            x = self.revin_layer(x.unsqueeze(-1), mode="norm")  #   [B, L] -> [B, L, 1]
            x = x.squeeze(-1)  #   [B, L, 1] -> [B, L]

        # Padding
        x = self.padding_patch_layer(
            x.unsqueeze(1)
        )  #   [B, 1, L] -> [B, 1, L + stride]
        x = x.squeeze(1)  #   [B, 1, L + stride] -> [B, L + stride]

        # Unfold patches
        x = x.unfold(
            -1, self.patch_len, self.stride
        )  #   [B, L] -> [B, n_patches, patch_len]

        # Linear projection
        x = self.dropout(
            self.linear_projection(x)
        )  #   [B, n_patches, patch_len] -> [B, n_patches, hidden_size]

        # Encoder
        x = self.patchmixer(
            x
        )  #   [B, n_patches, hidden_size] -> [B, n_patches, hidden_size]

        # Decoder
        x = self.linear_decoder(
            x
        )  #   [B, n_patches, hidden_size] -> [B, h * n_outputs]
        x = x.reshape(
            batch_size, self.h, -1
        )  #   [B, h * n_outputs] -> [B, h, n_outputs]

        # RevIN
        if self.revin:
            x = self.revin_layer(x, mode="denorm")

        # Map to output domain
        forecast = self.loss.domain_map(x)

        return forecast
