# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/models.mlp.ipynb.

# %% auto 0
__all__ = ['CustomConv1d', 'TCNCell', 'MLPResidual', 'MLP']

# %% ../../nbs/models.mlp.ipynb 5
from typing import Optional

import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np

from neuralforecast.losses.pytorch import MAE
from neuralforecast.common._base_windows import BaseWindows
from neuralforecast.common._modules import RevIN

# %% ../../nbs/models.mlp.ipynb 6
class CustomConv1d(nn.Module):
    """
    Forward- and backward looking Conv1D
    """

    def __init__(
        self,
        in_channels,
        out_channels,
        kernel_size,
        padding=0,
        dilation=1,
        mode="backward",
        groups=1,
    ):
        super().__init__()
        k = np.sqrt(1 / (in_channels * kernel_size))
        weight_data = -k + 2 * k * torch.rand(
            (out_channels, in_channels // groups, kernel_size)
        )
        bias_data = -k + 2 * k * torch.rand((out_channels))
        self.weight = nn.Parameter(weight_data, requires_grad=True)
        self.bias = nn.Parameter(bias_data, requires_grad=True)
        self.dilation = dilation
        self.groups = groups
        if mode == "backward":
            self.padding_left = padding
            self.padding_right = 0
        elif mode == "forward":
            self.padding_left = 0
            self.padding_right = padding

    def forward(self, x):
        xp = F.pad(x, (self.padding_left, self.padding_right))
        return F.conv1d(
            xp, self.weight, self.bias, dilation=self.dilation, groups=self.groups
        )


class TCNCell(nn.Module):
    """
    Temporal Convolutional Network Cell, consisting of CustomConv1D modules.
    """

    def __init__(
        self,
        in_channels,
        hidden_channels,
        out_channels,
        kernel_size,
        padding,
        dilation,
        mode,
        groups,
        dropout,
    ):
        super().__init__()
        self.conv1 = CustomConv1d(
            in_channels, hidden_channels, kernel_size, padding, dilation, mode, groups
        )
        self.conv2 = CustomConv1d(hidden_channels, hidden_channels + out_channels, 1)
        self.drop = nn.Dropout(dropout)
        self.hidden_channels = hidden_channels

    def forward(self, x):
        h_prev, out_prev = x
        h = self.drop(F.gelu(self.conv1(h_prev)))
        h = self.conv2(h)
        h_next = h[:, : self.hidden_channels]
        out_next = h[:, self.hidden_channels :]

        return (h_prev + h_next, out_prev + out_next)


class MLPResidual(nn.Module):
    """
    MLPResidual
    """

    def __init__(self, input_dim, hidden_size, output_dim, dropout, layernorm):
        super().__init__()
        self.layernorm = layernorm
        if layernorm:
            self.norm = nn.LayerNorm(output_dim)

        self.drop = nn.Dropout(dropout)
        self.lin1 = nn.Linear(input_dim, hidden_size)
        self.lin2 = nn.Linear(hidden_size, output_dim)
        self.skip = nn.Linear(input_dim, output_dim)

    def forward(self, input):
        # MLP dense
        x = F.gelu(self.lin1(input))
        x = self.drop(x)
        x = self.lin2(x)

        # Skip connection
        x_skip = self.skip(input)

        # Combine
        x = x + x_skip

        if self.layernorm:
            return self.norm(x)

        return x

# %% ../../nbs/models.mlp.ipynb 7
class MLP(BaseWindows):
    """MLP

    Modified MLP

    **Parameters:**<br>
    `h`: int, forecast horizon.<br>
    `input_size`: int, considered autorregresive inputs (lags), y=[1,2,3,4] input_size=2 -> lags=[1,2].<br>
    `hidden_size`: int=16, units for the hidden state size.<br>
    `dropout`: float=0.1, dropout rate used for the dropout layers throughout the architecture.<br>
    `futr_exog_list`: str list, future exogenous columns.<br>
    `hist_exog_list`: str list, historic exogenous columns.<br>
    `stat_exog_list`: str list, static exogenous columns.<br>
    `exclude_insample_y`: bool=False, the model skips the autoregressive features y[t-input_size:t] if True.<br>
    `loss`: PyTorch module, instantiated train loss class from [losses collection](https://nixtla.github.io/neuralforecast/losses.pytorch.html).<br>
    `valid_loss`: PyTorch module=`loss`, instantiated valid loss class from [losses collection](https://nixtla.github.io/neuralforecast/losses.pytorch.html).<br>
    `max_steps`: int=1000, maximum number of training steps.<br>
    `learning_rate`: float=1e-3, Learning rate between (0, 1).<br>
    `num_lr_decays`: int=-1, Number of learning rate decays, evenly distributed across max_steps.<br>
    `early_stop_patience_steps`: int=-1, Number of validation iterations before early stopping.<br>
    `val_check_steps`: int=100, Number of training steps between every validation loss check.<br>
    `batch_size`: int=32, number of different series in each batch.<br>
    `valid_batch_size`: int=None, number of different series in each validation and test batch, if None uses batch_size.<br>
    `windows_batch_size`: int=1024, number of windows to sample in each training batch, default uses all.<br>
    `inference_windows_batch_size`: int=-1, number of windows to sample in each inference batch, -1 uses all.<br>
    `start_padding_enabled`: bool=False, if True, the model will pad the time series with zeros at the beginning, by input size.<br>
    `step_size`: int=1, step size between each window of temporal data.<br>
    `scaler_type`: str='identity', type of scaler for temporal inputs normalization see [temporal scalers](https://nixtla.github.io/neuralforecast/common.scalers.html).<br>
    `random_seed`: int=1, random_seed for pytorch initializer and numpy generators.<br>
    `drop_last_loader`: bool=False, if True `TimeSeriesDataLoader` drops last non-full batch.<br>
    `alias`: str, optional,  Custom name of the model.<br>
    `optimizer`: Subclass of 'torch.optim.Optimizer', optional, user specified optimizer instead of the default choice (Adam).<br>
    `optimizer_kwargs`: dict, optional, list of parameters used by the user specified `optimizer`.<br>
    `lr_scheduler`: Subclass of 'torch.optim.lr_scheduler.LRScheduler', optional, user specified lr_scheduler instead of the default choice (StepLR).<br>
    `lr_scheduler_kwargs`: dict, optional, list of parameters used by the user specified `lr_scheduler`.<br>
    `dataloader_kwargs`: dict, optional, list of parameters passed into the PyTorch Lightning dataloader by the `TimeSeriesDataLoader`. <br>
    `**trainer_kwargs`: int,  keyword trainer arguments inherited from [PyTorch Lighning's trainer](https://pytorch-lightning.readthedocs.io/en/stable/api/pytorch_lightning.trainer.trainer.Trainer.html?highlight=trainer).<br>

    **References**<br>

    """

    # Class attributes
    SAMPLING_TYPE = "windows"
    EXOGENOUS_FUTR = False
    EXOGENOUS_HIST = False
    EXOGENOUS_STAT = False

    def __init__(
        self,
        h: int,
        input_size: int,
        hidden_size: int = 128,
        dropout: float = 0.2,
        head_dropout: float = 0.0,
        patch_len: int = 16,
        stride: int = 8,
        revin: bool = False,
        encoder: str = "transformer",
        decoder: str = "mlp",
        n_heads_transformer: int = 16,
        num_encoder_layers: int = 3,
        num_decoder_layers: int = 1,
        kernel_size_tcn: int = 2,
        layernorm_mlp: bool = False,
        global_skip: bool = False,
        futr_exog_list=None,
        hist_exog_list=None,
        stat_exog_list=None,
        exclude_insample_y=False,
        loss=MAE(),
        valid_loss=None,
        max_steps: int = 1000,
        learning_rate: float = 1e-3,
        num_lr_decays: int = -1,
        early_stop_patience_steps: int = -1,
        val_check_steps: int = 100,
        batch_size: int = 32,
        valid_batch_size: Optional[int] = None,
        windows_batch_size=1024,
        inference_windows_batch_size=1024,
        start_padding_enabled=False,
        step_size: int = 1,
        scaler_type: str = "identity",
        random_seed: int = 1,
        drop_last_loader: bool = False,
        optimizer=None,
        optimizer_kwargs=None,
        lr_scheduler=None,
        lr_scheduler_kwargs=None,
        dataloader_kwargs=None,
        **trainer_kwargs
    ):
        super(MLP, self).__init__(
            h=h,
            input_size=input_size,
            futr_exog_list=futr_exog_list,
            hist_exog_list=hist_exog_list,
            stat_exog_list=stat_exog_list,
            exclude_insample_y=exclude_insample_y,
            loss=loss,
            valid_loss=valid_loss,
            max_steps=max_steps,
            learning_rate=learning_rate,
            num_lr_decays=num_lr_decays,
            early_stop_patience_steps=early_stop_patience_steps,
            val_check_steps=val_check_steps,
            batch_size=batch_size,
            valid_batch_size=valid_batch_size,
            windows_batch_size=windows_batch_size,
            inference_windows_batch_size=inference_windows_batch_size,
            start_padding_enabled=start_padding_enabled,
            step_size=step_size,
            scaler_type=scaler_type,
            random_seed=random_seed,
            drop_last_loader=drop_last_loader,
            optimizer=optimizer,
            optimizer_kwargs=optimizer_kwargs,
            lr_scheduler=lr_scheduler,
            lr_scheduler_kwargs=lr_scheduler_kwargs,
            dataloader_kwargs=dataloader_kwargs,
            **trainer_kwargs
        )

        # ----------------------------------- Parse dimensions -----------------------------------#
        self.hidden_size = hidden_size
        self.h = h
        self.input_size = input_size
        self.dropout = dropout

        # Global skip
        self.global_skip = global_skip
        if global_skip:
            self.lin_global_skip = nn.Linear(
                input_size, h * self.loss.outputsize_multiplier
            )

        # RevIN
        self.revin = revin
        if self.revin:
            self.revin_layer = RevIN(1, affine=False, subtract_last=True)

        # Patches
        n_patches = int((input_size - patch_len) / stride + 1)
        self.patch_len = min(input_size + stride, patch_len)
        self.stride = stride
        self.linear_projection = nn.Linear(patch_len, hidden_size)

        # Encoder
        self.encoder = encoder
        if self.encoder == "tcn":
            self.kernel_size = kernel_size_tcn
            n_layers_tcn_enc = int(
                np.ceil(np.log2(((n_patches - 1) / (self.kernel_size - 1)) + 1))
            )
            layers_tcn_backward = [
                TCNCell(
                    hidden_size,
                    hidden_size,
                    hidden_size,
                    self.kernel_size,
                    padding=(self.kernel_size - 1) * 2**i,
                    dilation=2**i,
                    mode="backward",
                    groups=1,
                    dropout=dropout,
                )
                for i in range(n_layers_tcn_enc)
            ]
            layers_tcn_forward = [
                TCNCell(
                    hidden_size,
                    hidden_size,
                    hidden_size,
                    self.kernel_size,
                    padding=(self.kernel_size - 1) * 2**i,
                    dilation=2**i,
                    mode="forward",
                    groups=1,
                    dropout=dropout,
                )
                for i in range(n_layers_tcn_enc)
            ]
            self.tcn_encoder = nn.Sequential(*layers_tcn_backward, *layers_tcn_forward)
        elif self.encoder == "transformer":
            # Positional encoding, learned
            pos_enc = torch.empty((n_patches, hidden_size))
            nn.init.uniform_(pos_enc, -0.02, 0.02)
            self.pos_enc = nn.Parameter(pos_enc, requires_grad=True)
            self.dropout = nn.Dropout(dropout)
            # Transformer encoder
            encoder_layer = nn.TransformerEncoderLayer(
                d_model=hidden_size,
                nhead=n_heads_transformer,
                dim_feedforward=4 * hidden_size,
                dropout=dropout,
                activation=F.gelu,
                batch_first=True,
            )
            encoder_norm = nn.LayerNorm(hidden_size)
            self.transformer_encoder = nn.TransformerEncoder(
                encoder_layer, num_encoder_layers, encoder_norm
            )
        elif self.encoder == "lstm":
            self.lstm_encoder = nn.LSTM(
                hidden_size,
                hidden_size,
                num_layers=num_encoder_layers,
                batch_first=True,
                dropout=dropout,
            )
        elif self.encoder == "mlp":
            mlp_encoder_layers = [
                MLPResidual(
                    input_dim=hidden_size * n_patches if i == 0 else hidden_size,
                    hidden_size=hidden_size,
                    output_dim=hidden_size,
                    dropout=dropout,
                    layernorm=layernorm_mlp,
                )
                for i in range(num_encoder_layers)
            ]
            mlp_encoder_layers.insert(0, nn.Flatten(start_dim=-2))
            mlp_encoder_layers.append(nn.Linear(hidden_size, hidden_size * n_patches))
            self.mlp_encoder = nn.Sequential(*mlp_encoder_layers)

        # Decoder
        self.decoder = decoder
        if self.decoder == "mlp":
            decoder_output_size = h * self.loss.outputsize_multiplier
            dense_decoder_layers = [
                MLPResidual(
                    input_dim=hidden_size * n_patches if i == 0 else hidden_size,
                    hidden_size=hidden_size,
                    output_dim=(
                        decoder_output_size
                        if i == num_decoder_layers - 1
                        else hidden_size
                    ),
                    dropout=dropout,
                    layernorm=layernorm_mlp,
                )
                for i in range(num_decoder_layers)
            ]
            dense_decoder_layers.insert(0, nn.Flatten(start_dim=-2))
            self.mlp_decoder = nn.Sequential(*dense_decoder_layers)
        elif self.decoder == "tcn":
            self.tcn_projection = nn.Linear(n_patches, h)
            self.kernel_size = kernel_size_tcn
            n_layers_tcn_dec = int(
                np.ceil(np.log2(((self.h - 1) / (self.kernel_size - 1)) + 1))
            )
            layers_tcn_backward = [
                TCNCell(
                    hidden_size,
                    hidden_size,
                    self.loss.outputsize_multiplier,
                    self.kernel_size,
                    padding=(self.kernel_size - 1) * 2**i,
                    dilation=2**i,
                    mode="backward",
                    groups=1,
                    dropout=dropout,
                )
                for i in range(n_layers_tcn_dec)
            ]
            layers_tcn_forward = [
                TCNCell(
                    hidden_size,
                    hidden_size,
                    self.loss.outputsize_multiplier,
                    self.kernel_size,
                    padding=(self.kernel_size - 1) * 2**i,
                    dilation=2**i,
                    mode="forward",
                    groups=1,
                    dropout=dropout,
                )
                for i in range(n_layers_tcn_dec)
            ]
            self.tcn_decoder = nn.Sequential(*layers_tcn_backward, *layers_tcn_forward)
        elif self.decoder == "transformer":
            self.transformer_projection = nn.Linear(n_patches, h)
            # Positional encoding, learned
            pos_dec = torch.empty((h, hidden_size))
            nn.init.uniform_(pos_dec, -0.02, 0.02)
            self.pos_dec = nn.Parameter(pos_dec, requires_grad=True)
            self.dropout = nn.Dropout(dropout)
            # Transformer decoder
            decoder_layer = nn.TransformerEncoderLayer(
                d_model=hidden_size,
                nhead=n_heads_transformer,
                dim_feedforward=4 * hidden_size,
                dropout=dropout,
                activation=F.gelu,
                batch_first=True,
            )
            decoder_norm = nn.LayerNorm(hidden_size)
            self.transformer_decoder = nn.TransformerEncoder(
                decoder_layer, num_decoder_layers, decoder_norm
            )
            # Output projection
            self.transformer_output_projection = nn.Linear(
                hidden_size, self.loss.outputsize_multiplier
            )

    def forward(self, windows_batch):
        # Parse windows_batch
        x = windows_batch["insample_y"]  #   [B, L]
        batch_size = x.size(0)

        # RevIN
        if self.revin:
            x = self.revin_layer(x.unsqueeze(-1), mode="norm").squeeze(-1)

        # Global skip
        if self.global_skip:
            x_skip = self.lin_global_skip(x)

        # Unfold patches
        x = x.unfold(
            -1, self.patch_len, self.stride
        )  #   [B, L] -> [B, n_patches, patch_len]

        # Linear projection
        x = self.linear_projection(
            x
        )  #   [B, n_patches, patch_len] -> [B, n_patches, hidden_size]

        # Encoder
        if self.encoder == "tcn":
            x = x.permute(
                0, 2, 1
            )  #   [B, n_patches, hidden_size] -> [B, hidden_size, n_patches]
            _, x = self.tcn_encoder(
                (x, 0)
            )  #   [B, hidden_size, n_patches] -> [B, hidden_size, n_patches]
            x = x.permute(
                0, 2, 1
            )  #   [B, hidden_size, n_patches] -> [B, n_patches, hidden_size]
        elif self.encoder == "transformer":
            x = self.dropout(x + self.pos_enc)
            x = self.transformer_encoder(
                x
            )  #   [B, n_patches, hidden_size] -> [B, n_patches, hidden_size]
        elif self.encoder == "lstm":
            x, _ = self.lstm_encoder(
                x
            )  #   [B, n_patches, hidden_size] -> [B, n_patches, hidden_size]
        elif self.encoder == "mlp":
            x = self.mlp_encoder(
                x
            )  #   [B, n_patches, hidden_size] -> [B, n_patches * hidden_size]
            x = x.reshape(
                batch_size, -1, self.hidden_size
            )  #   [B, n_patches * hidden_size] -> [B, n_patches, hidden_size]

        # Decoder
        if self.decoder == "mlp":
            x = self.mlp_decoder(
                x
            )  #   [B, n_patches, hidden_size] -> [B, h * n_outputs]
        elif self.decoder == "tcn":
            x = x.permute(
                0, 2, 1
            )  #   [B, n_patches, hidden_size] -> [B, hidden_size, n_patches]
            x = self.tcn_projection(
                x
            )  #   [B, hidden_size, n_patches] -> [B, hidden_size, h]
            _, x = self.tcn_decoder(
                (x, 0)
            )  #   [B, hidden_size, h] -> [B, n_outputs, h]
            x = x.reshape(batch_size, -1)  #   [B, h, n_outputs] -> [B, h * n_outputs]
        elif self.decoder == "transformer":
            x = x.permute(
                0, 2, 1
            )  #   [B, n_patches, hidden_size] -> [B, hidden_size, n_patches]
            x = self.transformer_projection(
                x
            )  #   [B, hidden_size, n_patches] -> [B, hidden_size, h]
            x = x.permute(0, 2, 1)  #   [B, hidden_size, h] -> [B, h, hidden_size]
            x = self.dropout(
                x + self.pos_dec
            )  #   [B, h, hidden_size] -> [B, h, hidden_size]
            x = self.transformer_decoder(
                x
            )  #   [B, h, hidden_size] -> [B, h, hidden_size]
            x = self.transformer_output_projection(
                x
            )  #   [B, h, hidden_size] -> [B, h, n_outputs]
            x = x.reshape(batch_size, -1)  #   [B, h, n_outputs] -> [B, h * n_outputs]

        # Global skip
        if self.global_skip:
            x = x + x_skip  #   [B, h * n_outputs] -> [B, h * n_outputs]

        x = x.reshape(
            batch_size, self.h, -1
        )  #   [B, h * n_outputs] -> [B, h, n_outputs]

        if self.revin:
            x = self.revin_layer(x, mode="denorm")

        # Map to output domain
        forecast = self.loss.domain_map(x)

        return forecast
